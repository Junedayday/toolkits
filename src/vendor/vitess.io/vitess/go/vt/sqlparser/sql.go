// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               *SQLVal
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const VALUES = 57376
const LAST_INSERT_ID = 57377
const NEXT = 57378
const VALUE = 57379
const SHARE = 57380
const MODE = 57381
const SQL_NO_CACHE = 57382
const SQL_CACHE = 57383
const JOIN = 57384
const STRAIGHT_JOIN = 57385
const LEFT = 57386
const RIGHT = 57387
const INNER = 57388
const OUTER = 57389
const CROSS = 57390
const NATURAL = 57391
const USE = 57392
const FORCE = 57393
const ON = 57394
const USING = 57395
const ID = 57396
const HEX = 57397
const STRING = 57398
const INTEGRAL = 57399
const FLOAT = 57400
const HEXNUM = 57401
const VALUE_ARG = 57402
const LIST_ARG = 57403
const COMMENT = 57404
const COMMENT_KEYWORD = 57405
const BIT_LITERAL = 57406
const NULL = 57407
const TRUE = 57408
const FALSE = 57409
const OR = 57410
const AND = 57411
const NOT = 57412
const BETWEEN = 57413
const CASE = 57414
const WHEN = 57415
const THEN = 57416
const ELSE = 57417
const END = 57418
const LE = 57419
const GE = 57420
const NE = 57421
const NULL_SAFE_EQUAL = 57422
const IS = 57423
const LIKE = 57424
const REGEXP = 57425
const IN = 57426
const SHIFT_LEFT = 57427
const SHIFT_RIGHT = 57428
const DIV = 57429
const MOD = 57430
const UNARY = 57431
const COLLATE = 57432
const BINARY = 57433
const UNDERSCORE_BINARY = 57434
const UNDERSCORE_UTF8MB4 = 57435
const INTERVAL = 57436
const JSON_EXTRACT_OP = 57437
const JSON_UNQUOTE_EXTRACT_OP = 57438
const CREATE = 57439
const ALTER = 57440
const DROP = 57441
const RENAME = 57442
const ANALYZE = 57443
const ADD = 57444
const SCHEMA = 57445
const TABLE = 57446
const INDEX = 57447
const VIEW = 57448
const TO = 57449
const IGNORE = 57450
const IF = 57451
const UNIQUE = 57452
const PRIMARY = 57453
const COLUMN = 57454
const SPATIAL = 57455
const FULLTEXT = 57456
const KEY_BLOCK_SIZE = 57457
const ACTION = 57458
const CASCADE = 57459
const CONSTRAINT = 57460
const FOREIGN = 57461
const NO = 57462
const REFERENCES = 57463
const RESTRICT = 57464
const SHOW = 57465
const DESCRIBE = 57466
const EXPLAIN = 57467
const DATE = 57468
const ESCAPE = 57469
const REPAIR = 57470
const OPTIMIZE = 57471
const TRUNCATE = 57472
const MAXVALUE = 57473
const PARTITION = 57474
const REORGANIZE = 57475
const LESS = 57476
const THAN = 57477
const PROCEDURE = 57478
const TRIGGER = 57479
const VINDEX = 57480
const VINDEXES = 57481
const STATUS = 57482
const VARIABLES = 57483
const BEGIN = 57484
const START = 57485
const TRANSACTION = 57486
const COMMIT = 57487
const ROLLBACK = 57488
const BIT = 57489
const TINYINT = 57490
const SMALLINT = 57491
const MEDIUMINT = 57492
const INT = 57493
const INTEGER = 57494
const BIGINT = 57495
const INTNUM = 57496
const REAL = 57497
const DOUBLE = 57498
const FLOAT_TYPE = 57499
const DECIMAL = 57500
const NUMERIC = 57501
const TIME = 57502
const TIMESTAMP = 57503
const DATETIME = 57504
const YEAR = 57505
const CHAR = 57506
const VARCHAR = 57507
const BOOL = 57508
const CHARACTER = 57509
const VARBINARY = 57510
const NCHAR = 57511
const TEXT = 57512
const TINYTEXT = 57513
const MEDIUMTEXT = 57514
const LONGTEXT = 57515
const BLOB = 57516
const TINYBLOB = 57517
const MEDIUMBLOB = 57518
const LONGBLOB = 57519
const JSON = 57520
const ENUM = 57521
const GEOMETRY = 57522
const POINT = 57523
const LINESTRING = 57524
const POLYGON = 57525
const GEOMETRYCOLLECTION = 57526
const MULTIPOINT = 57527
const MULTILINESTRING = 57528
const MULTIPOLYGON = 57529
const NULLX = 57530
const AUTO_INCREMENT = 57531
const APPROXNUM = 57532
const SIGNED = 57533
const UNSIGNED = 57534
const ZEROFILL = 57535
const COLLATION = 57536
const DATABASES = 57537
const TABLES = 57538
const VITESS_KEYSPACES = 57539
const VITESS_SHARDS = 57540
const VITESS_TABLETS = 57541
const VSCHEMA_TABLES = 57542
const VITESS_TARGET = 57543
const FULL = 57544
const PROCESSLIST = 57545
const COLUMNS = 57546
const NAMES = 57547
const CHARSET = 57548
const GLOBAL = 57549
const SESSION = 57550
const ISOLATION = 57551
const LEVEL = 57552
const READ = 57553
const WRITE = 57554
const ONLY = 57555
const REPEATABLE = 57556
const COMMITTED = 57557
const UNCOMMITTED = 57558
const SERIALIZABLE = 57559
const CURRENT_TIMESTAMP = 57560
const DATABASE = 57561
const CURRENT_DATE = 57562
const CURRENT_TIME = 57563
const LOCALTIME = 57564
const LOCALTIMESTAMP = 57565
const UTC_DATE = 57566
const UTC_TIME = 57567
const UTC_TIMESTAMP = 57568
const REPLACE = 57569
const CONVERT = 57570
const CAST = 57571
const SUBSTR = 57572
const SUBSTRING = 57573
const GROUP_CONCAT = 57574
const SEPARATOR = 57575
const MATCH = 57576
const AGAINST = 57577
const BOOLEAN = 57578
const LANGUAGE = 57579
const WITH = 57580
const QUERY = 57581
const EXPANSION = 57582
const UNUSED = 57583

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"VITESS_TARGET",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 28,
	-2, 4,
	-1, 36,
	157, 288,
	158, 288,
	-2, 280,
	-1, 254,
	111, 615,
	-2, 611,
	-1, 255,
	111, 616,
	-2, 612,
	-1, 325,
	81, 782,
	-2, 59,
	-1, 326,
	81, 740,
	-2, 60,
	-1, 331,
	81, 722,
	-2, 577,
	-1, 333,
	81, 761,
	-2, 579,
	-1, 601,
	53, 42,
	55, 42,
	-2, 44,
	-1, 737,
	111, 618,
	-2, 614,
	-1, 949,
	5, 29,
	-2, 422,
	-1, 974,
	5, 28,
	-2, 552,
	-1, 1201,
	5, 29,
	-2, 553,
	-1, 1247,
	5, 28,
	-2, 555,
	-1, 1313,
	5, 29,
	-2, 556,
}

const yyPrivate = 57344

const yyLast = 11326

var yyAct = [...]int{

	255, 1348, 1304, 548, 673, 1338, 1207, 799, 888, 285,
	1258, 1108, 1136, 817, 1039, 1109, 839, 977, 595, 882,
	233, 1105, 915, 848, 838, 835, 593, 1013, 800, 330,
	460, 80, 762, 993, 772, 198, 941, 702, 198, 1030,
	1042, 852, 1082, 611, 769, 788, 982, 480, 739, 486,
	547, 3, 610, 429, 878, 324, 257, 796, 242, 55,
	492, 597, 500, 923, 198, 198, 80, 321, 319, 54,
	198, 562, 198, 582, 80, 1341, 1325, 1336, 1311, 905,
	1333, 889, 1324, 1310, 1100, 1195, 434, 1268, 1130, 1001,
	310, 830, 1000, 904, 455, 1002, 246, 311, 1131, 1132,
	232, 1144, 1145, 1146, 231, 193, 189, 190, 191, 1149,
	1147, 312, 259, 831, 832, 612, 248, 613, 230, 1021,
	471, 909, 861, 225, 1220, 59, 862, 472, 469, 1236,
	903, 869, 443, 868, 1284, 513, 512, 522, 523, 515,
	516, 517, 518, 519, 520, 521, 514, 1184, 1182, 524,
	61, 62, 63, 64, 65, 224, 1083, 1335, 457, 1332,
	459, 466, 467, 1305, 1063, 797, 1296, 226, 227, 228,
	229, 478, 855, 1259, 853, 187, 1266, 1352, 1356, 900,
	897, 898, 444, 896, 437, 681, 1261, 198, 855, 198,
	456, 458, 1085, 818, 820, 198, 186, 1060, 187, 855,
	672, 430, 198, 1062, 992, 991, 80, 80, 80, 80,
	990, 80, 432, 907, 910, 440, 201, 1014, 188, 1289,
	80, 192, 536, 537, 1087, 1204, 1091, 1069, 1086, 957,
	1084, 836, 935, 711, 504, 1089, 1050, 463, 464, 465,
	450, 468, 1153, 317, 1088, 524, 708, 703, 902, 80,
	475, 430, 1260, 497, 917, 499, 869, 1090, 1092, 1050,
	771, 514, 954, 1294, 524, 1048, 854, 68, 819, 499,
	901, 851, 849, 454, 850, 1267, 1265, 1148, 195, 847,
	853, 1350, 854, 428, 1351, 1163, 1349, 1309, 1048, 489,
	746, 980, 1154, 854, 789, 614, 488, 1061, 1285, 1059,
	714, 715, 69, 1102, 744, 745, 743, 676, 320, 906,
	198, 498, 497, 431, 789, 433, 964, 198, 198, 198,
	1019, 1298, 908, 80, 446, 447, 448, 704, 499, 80,
	1049, 916, 932, 933, 934, 1054, 1051, 1044, 1052, 1047,
	729, 731, 732, 1045, 1046, 730, 1357, 498, 497, 286,
	49, 483, 487, 1049, 476, 477, 494, 1053, 1054, 1051,
	1044, 1052, 1047, 1056, 499, 490, 1045, 1046, 505, 52,
	564, 565, 566, 567, 568, 569, 570, 858, 1315, 742,
	1053, 1227, 859, 498, 497, 1358, 1043, 602, 1226, 185,
	608, 515, 516, 517, 518, 519, 520, 521, 514, 49,
	499, 524, 763, 549, 764, 1292, 1034, 238, 953, 710,
	952, 1033, 560, 316, 513, 512, 522, 523, 515, 516,
	517, 518, 519, 520, 521, 514, 498, 497, 524, 198,
	441, 1022, 442, 1003, 80, 1004, 436, 1317, 449, 1295,
	198, 198, 80, 499, 198, 451, 709, 198, 1243, 1224,
	1014, 198, 309, 80, 80, 80, 80, 80, 80, 80,
	80, 1066, 498, 497, 671, 1031, 942, 80, 80, 1251,
	1334, 479, 680, 21, 198, 1321, 479, 52, 1009, 499,
	690, 1191, 479, 691, 692, 693, 694, 695, 696, 697,
	698, 891, 80, 498, 497, 765, 198, 699, 700, 687,
	1104, 686, 80, 517, 518, 519, 520, 521, 514, 716,
	499, 524, 438, 439, 688, 1251, 1302, 740, 513, 512,
	522, 523, 515, 516, 517, 518, 519, 520, 521, 514,
	677, 237, 524, 675, 737, 670, 284, 1318, 275, 274,
	277, 278, 279, 280, 1251, 1263, 80, 276, 281, 718,
	1251, 479, 1273, 577, 452, 461, 461, 461, 461, 445,
	461, 1272, 601, 1269, 733, 1251, 1252, 78, 735, 461,
	1216, 1215, 1127, 479, 1203, 479, 605, 198, 1160, 1159,
	198, 198, 198, 198, 198, 1156, 1157, 1150, 49, 1156,
	1155, 706, 198, 766, 767, 198, 947, 479, 856, 198,
	978, 776, 329, 533, 198, 198, 535, 824, 80, 604,
	435, 579, 479, 1106, 726, 727, 978, 793, 606, 786,
	604, 80, 584, 587, 588, 589, 585, 774, 586, 590,
	825, 1199, 983, 984, 546, 1326, 550, 551, 552, 553,
	554, 555, 556, 557, 558, 776, 561, 563, 563, 563,
	563, 563, 563, 563, 563, 571, 572, 573, 574, 823,
	822, 717, 828, 827, 814, 23, 594, 549, 781, 784,
	779, 780, 622, 198, 790, 843, 80, 802, 80, 23,
	805, 23, 198, 678, 679, 198, 80, 682, 1072, 884,
	685, 801, 803, 804, 979, 806, 774, 479, 621, 620,
	56, 578, 198, 972, 198, 198, 892, 973, 894, 1246,
	579, 979, 1162, 52, 674, 1158, 913, 705, 1005, 773,
	775, 880, 881, 959, 956, 829, 579, 52, 239, 52,
	1301, 834, 947, 947, 607, 791, 712, 579, 1231, 725,
	947, 737, 329, 329, 329, 329, 1222, 329, 863, 883,
	1141, 1121, 1008, 740, 978, 879, 329, 864, 865, 866,
	867, 874, 924, 873, 925, 816, 1343, 958, 955, 870,
	871, 872, 886, 875, 876, 877, 52, 983, 984, 1339,
	1143, 1106, 1035, 461, 986, 502, 684, 473, 724, 989,
	988, 461, 937, 584, 587, 588, 589, 585, 808, 586,
	590, 807, 461, 461, 461, 461, 461, 461, 461, 461,
	811, 920, 777, 778, 809, 812, 461, 461, 785, 810,
	798, 813, 80, 588, 589, 198, 921, 922, 1330, 487,
	243, 244, 792, 963, 794, 795, 1323, 1068, 493, 80,
	1329, 995, 930, 997, 929, 481, 1026, 974, 826, 619,
	453, 996, 987, 491, 1018, 1006, 1300, 482, 1299, 329,
	1244, 1016, 1010, 1197, 1232, 616, 893, 683, 592, 240,
	241, 493, 234, 998, 928, 1278, 235, 56, 1277, 1234,
	1015, 979, 927, 261, 474, 49, 701, 80, 80, 495,
	80, 948, 1011, 1012, 1025, 1345, 1027, 1028, 1029, 1286,
	550, 1345, 1344, 1221, 707, 58, 965, 60, 603, 53,
	1, 1337, 890, 80, 1032, 1038, 887, 899, 1037, 1303,
	1257, 252, 1135, 846, 837, 911, 67, 198, 912, 316,
	316, 316, 316, 316, 427, 66, 80, 944, 1055, 1293,
	845, 945, 844, 1064, 594, 914, 821, 315, 949, 950,
	951, 1264, 1065, 316, 1219, 857, 1020, 960, 860, 1142,
	1297, 1017, 966, 462, 967, 968, 969, 970, 627, 625,
	329, 626, 624, 629, 628, 1076, 80, 80, 329, 623,
	1107, 1075, 1081, 1110, 931, 209, 1093, 737, 322, 329,
	329, 329, 329, 329, 329, 329, 329, 1094, 1023, 1024,
	591, 615, 885, 329, 329, 496, 80, 1117, 80, 80,
	1115, 70, 1058, 1057, 1129, 895, 470, 211, 532, 1041,
	926, 1101, 999, 328, 1134, 461, 1112, 461, 720, 327,
	1133, 946, 1113, 1138, 1067, 461, 198, 1116, 502, 1139,
	1140, 329, 713, 485, 80, 1276, 1233, 961, 962, 1151,
	1152, 559, 787, 260, 728, 1128, 273, 80, 198, 270,
	272, 271, 719, 971, 80, 506, 258, 250, 314, 575,
	80, 583, 581, 198, 580, 985, 981, 313, 1071, 1194,
	1283, 1103, 768, 723, 25, 801, 936, 57, 1171, 1172,
	245, 801, 782, 782, 19, 18, 1118, 1119, 782, 1173,
	1120, 17, 20, 1122, 16, 15, 14, 1180, 29, 13,
	12, 11, 10, 9, 8, 782, 7, 6, 1080, 5,
	4, 236, 80, 22, 80, 80, 80, 198, 80, 1198,
	1209, 1210, 1211, 2, 80, 0, 0, 1206, 0, 0,
	534, 0, 80, 0, 329, 1212, 975, 976, 1218, 1214,
	1006, 0, 0, 0, 0, 0, 0, 329, 0, 0,
	0, 0, 80, 80, 80, 1126, 1164, 0, 0, 0,
	1070, 0, 0, 0, 316, 0, 0, 1229, 0, 1166,
	1230, 0, 1169, 0, 538, 539, 540, 541, 542, 543,
	544, 545, 1228, 0, 0, 0, 0, 0, 0, 0,
	315, 0, 0, 0, 80, 80, 0, 0, 0, 1110,
	1177, 1178, 329, 1179, 329, 1245, 1181, 80, 1183, 0,
	0, 1196, 329, 0, 0, 0, 1256, 0, 549, 1262,
	0, 0, 80, 0, 0, 0, 0, 461, 1274, 0,
	0, 0, 0, 0, 0, 0, 0, 1174, 329, 1270,
	0, 1271, 80, 1247, 1176, 0, 1110, 0, 1287, 0,
	0, 0, 461, 0, 1217, 1185, 1186, 1187, 1291, 0,
	1190, 0, 0, 0, 0, 0, 0, 0, 0, 1161,
	0, 0, 1307, 1200, 1201, 1202, 327, 1205, 0, 1223,
	80, 1225, 0, 0, 1312, 0, 0, 198, 0, 1288,
	0, 1168, 0, 0, 0, 0, 80, 1319, 0, 0,
	0, 0, 1235, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1111, 1328, 49, 0, 80, 1327, 0,
	0, 0, 0, 1331, 0, 0, 484, 0, 0, 0,
	1123, 1124, 1125, 1342, 0, 0, 0, 1353, 522, 523,
	515, 516, 517, 518, 519, 520, 521, 514, 994, 0,
	524, 0, 0, 0, 0, 0, 1242, 0, 0, 0,
	0, 196, 0, 0, 223, 329, 0, 0, 0, 0,
	0, 1253, 1254, 1255, 0, 0, 0, 0, 0, 0,
	0, 741, 0, 0, 1306, 549, 0, 0, 249, 801,
	196, 196, 0, 0, 0, 0, 196, 0, 196, 1279,
	1280, 1281, 1282, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 316, 1036, 329, 0, 329, 0, 738, 0,
	0, 747, 748, 749, 750, 751, 752, 753, 754, 755,
	756, 757, 758, 759, 760, 761, 0, 0, 0, 329,
	1193, 0, 0, 0, 0, 1308, 0, 0, 0, 0,
	1313, 0, 0, 315, 315, 315, 315, 315, 736, 0,
	0, 0, 329, 0, 0, 1320, 0, 0, 315, 0,
	23, 24, 50, 26, 27, 0, 0, 315, 0, 0,
	0, 0, 0, 0, 329, 0, 0, 0, 0, 42,
	0, 0, 0, 0, 28, 47, 48, 0, 0, 782,
	0, 461, 1114, 994, 0, 782, 1188, 479, 1354, 1355,
	0, 0, 0, 196, 37, 196, 0, 0, 52, 0,
	0, 196, 0, 0, 0, 0, 0, 0, 196, 0,
	1316, 0, 329, 0, 329, 1137, 0, 0, 0, 1111,
	0, 207, 1248, 513, 512, 522, 523, 515, 516, 517,
	518, 519, 520, 521, 514, 0, 0, 524, 0, 0,
	0, 327, 0, 0, 0, 219, 0, 0, 0, 0,
	1165, 0, 1275, 0, 840, 0, 0, 0, 30, 31,
	33, 32, 35, 1167, 0, 0, 1111, 0, 49, 0,
	1170, 0, 0, 0, 0, 0, 329, 0, 0, 0,
	0, 0, 0, 0, 36, 43, 44, 0, 0, 45,
	46, 34, 0, 0, 0, 202, 0, 741, 0, 0,
	0, 0, 204, 38, 39, 0, 40, 41, 0, 210,
	206, 0, 0, 0, 0, 0, 196, 0, 0, 0,
	0, 0, 0, 196, 599, 196, 0, 0, 1208, 0,
	1208, 1208, 1208, 0, 1213, 0, 938, 939, 940, 0,
	329, 208, 0, 0, 212, 736, 0, 0, 1208, 0,
	0, 0, 0, 0, 0, 1340, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 329, 329,
	329, 0, 203, 0, 0, 0, 0, 0, 315, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 51, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 213,
	205, 0, 214, 215, 216, 218, 217, 222, 1192, 0,
	1249, 1250, 221, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1137, 479, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 196, 0, 0, 1208, 0,
	0, 0, 0, 0, 0, 0, 196, 196, 0, 0,
	196, 0, 0, 196, 0, 0, 0, 689, 1290, 0,
	513, 512, 522, 523, 515, 516, 517, 518, 519, 520,
	521, 514, 840, 0, 524, 0, 0, 0, 0, 0,
	196, 513, 512, 522, 523, 515, 516, 517, 518, 519,
	520, 521, 514, 782, 0, 524, 1314, 0, 0, 0,
	0, 0, 196, 0, 0, 0, 0, 0, 0, 0,
	0, 689, 1322, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1040, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1208, 1078, 1079, 0, 0, 0, 0,
	1189, 0, 0, 0, 0, 0, 0, 1095, 1096, 0,
	1098, 1099, 0, 249, 0, 0, 0, 0, 249, 249,
	0, 0, 783, 783, 249, 0, 0, 0, 783, 1074,
	0, 0, 0, 0, 0, 0, 0, 0, 249, 249,
	249, 249, 0, 196, 0, 783, 196, 196, 196, 196,
	196, 1097, 0, 0, 0, 0, 0, 0, 815, 0,
	0, 196, 0, 0, 0, 599, 0, 0, 0, 0,
	196, 196, 0, 513, 512, 522, 523, 515, 516, 517,
	518, 519, 520, 521, 514, 0, 315, 524, 0, 0,
	0, 0, 0, 0, 508, 0, 511, 0, 0, 840,
	0, 840, 525, 526, 527, 528, 529, 530, 531, 0,
	509, 510, 507, 513, 512, 522, 523, 515, 516, 517,
	518, 519, 520, 521, 514, 0, 0, 524, 0, 1175,
	0, 0, 0, 0, 0, 644, 0, 0, 0, 196,
	0, 0, 0, 0, 0, 0, 0, 0, 196, 0,
	0, 196, 512, 522, 523, 515, 516, 517, 518, 519,
	520, 521, 514, 1074, 0, 524, 0, 0, 196, 0,
	918, 919, 1077, 0, 0, 0, 0, 0, 689, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	249, 0, 513, 512, 522, 523, 515, 516, 517, 518,
	519, 520, 521, 514, 0, 0, 524, 0, 0, 0,
	0, 0, 632, 0, 513, 512, 522, 523, 515, 516,
	517, 518, 519, 520, 521, 514, 0, 840, 524, 0,
	0, 0, 0, 0, 0, 0, 0, 249, 0, 0,
	1237, 1238, 0, 1239, 1240, 1241, 0, 0, 645, 0,
	0, 0, 0, 249, 0, 0, 1040, 840, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 658,
	659, 660, 661, 662, 663, 664, 0, 665, 666, 667,
	668, 669, 646, 647, 648, 649, 630, 631, 0, 0,
	633, 196, 634, 635, 636, 637, 638, 639, 640, 641,
	642, 643, 650, 651, 652, 653, 654, 655, 656, 657,
	943, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	513, 512, 522, 523, 515, 516, 517, 518, 519, 520,
	521, 514, 0, 0, 524, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1346, 196, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 249, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 249, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 689, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 783,
	0, 0, 0, 0, 0, 783, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 196, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 196, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 196,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 599, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	415, 405, 0, 377, 418, 355, 369, 426, 370, 371,
	398, 341, 385, 134, 367, 0, 358, 336, 364, 337,
	356, 379, 101, 382, 354, 407, 388, 417, 115, 424,
	117, 393, 0, 153, 126, 0, 0, 381, 409, 383,
	403, 376, 399, 346, 392, 419, 368, 396, 420, 0,
	0, 0, 79, 0, 841, 842, 0, 0, 0, 0,
	0, 94, 0, 395, 414, 366, 397, 335, 394, 0,
	339, 342, 425, 412, 361, 362, 1007, 0, 0, 0,
	0, 0, 0, 380, 384, 400, 374, 0, 0, 0,
	0, 0, 0, 0, 0, 359, 0, 391, 0, 0,
	0, 343, 340, 783, 0, 378, 0, 0, 0, 345,
	0, 360, 401, 196, 334, 404, 410, 375, 199, 413,
	373, 372, 416, 140, 0, 156, 106, 114, 82, 88,
	0, 105, 132, 145, 149, 408, 357, 365, 97, 363,
	147, 136, 168, 390, 137, 146, 118, 160, 141, 167,
	200, 175, 158, 174, 83, 157, 166, 95, 150, 85,
	164, 155, 124, 110, 111, 84, 0, 144, 100, 104,
	99, 133, 161, 162, 98, 183, 89, 173, 87, 90,
	172, 131, 159, 165, 125, 122, 86, 163, 123, 121,
	113, 102, 107, 138, 120, 139, 108, 128, 127, 129,
	0, 338, 0, 154, 170, 184, 92, 353, 411, 176,
	177, 178, 179, 180, 0, 0, 93, 130, 91, 109,
	151, 112, 119, 143, 182, 135, 148, 96, 169, 152,
	349, 352, 347, 348, 386, 387, 421, 422, 423, 402,
	344, 0, 350, 351, 0, 406, 389, 81, 0, 116,
	181, 142, 103, 171, 415, 405, 0, 377, 418, 355,
	369, 426, 370, 371, 398, 341, 385, 134, 367, 0,
	358, 336, 364, 337, 356, 379, 101, 382, 354, 407,
	388, 417, 115, 424, 117, 393, 0, 153, 126, 0,
	0, 381, 409, 383, 403, 376, 399, 346, 392, 419,
	368, 396, 420, 0, 0, 0, 79, 0, 841, 842,
	0, 0, 0, 0, 0, 94, 0, 395, 414, 366,
	397, 335, 394, 0, 339, 342, 425, 412, 361, 362,
	0, 0, 0, 0, 0, 0, 0, 380, 384, 400,
	374, 0, 0, 0, 0, 0, 0, 0, 0, 359,
	0, 391, 0, 0, 0, 343, 340, 0, 0, 378,
	0, 0, 0, 345, 0, 360, 401, 0, 334, 404,
	410, 375, 199, 413, 373, 372, 416, 140, 0, 156,
	106, 114, 82, 88, 0, 105, 132, 145, 149, 408,
	357, 365, 97, 363, 147, 136, 168, 390, 137, 146,
	118, 160, 141, 167, 200, 175, 158, 174, 83, 157,
	166, 95, 150, 85, 164, 155, 124, 110, 111, 84,
	0, 144, 100, 104, 99, 133, 161, 162, 98, 183,
	89, 173, 87, 90, 172, 131, 159, 165, 125, 122,
	86, 163, 123, 121, 113, 102, 107, 138, 120, 139,
	108, 128, 127, 129, 0, 338, 0, 154, 170, 184,
	92, 353, 411, 176, 177, 178, 179, 180, 0, 0,
	93, 130, 91, 109, 151, 112, 119, 143, 182, 135,
	148, 96, 169, 152, 349, 352, 347, 348, 386, 387,
	421, 422, 423, 402, 344, 0, 350, 351, 0, 406,
	389, 81, 0, 116, 181, 142, 103, 171, 415, 405,
	0, 377, 418, 355, 369, 426, 370, 371, 398, 341,
	385, 134, 367, 0, 358, 336, 364, 337, 356, 379,
	101, 382, 354, 407, 388, 417, 115, 424, 117, 393,
	0, 153, 126, 0, 0, 381, 409, 383, 403, 376,
	399, 346, 392, 419, 368, 396, 420, 52, 0, 0,
	79, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	0, 395, 414, 366, 397, 335, 394, 0, 339, 342,
	425, 412, 361, 362, 0, 0, 0, 0, 0, 0,
	0, 380, 384, 400, 374, 0, 0, 0, 0, 0,
	0, 0, 0, 359, 0, 391, 0, 0, 0, 343,
	340, 0, 0, 378, 0, 0, 0, 345, 0, 360,
	401, 0, 334, 404, 410, 375, 199, 413, 373, 372,
	416, 140, 0, 156, 106, 114, 82, 88, 0, 105,
	132, 145, 149, 408, 357, 365, 97, 363, 147, 136,
	168, 390, 137, 146, 118, 160, 141, 167, 200, 175,
	158, 174, 83, 157, 166, 95, 150, 85, 164, 155,
	124, 110, 111, 84, 0, 144, 100, 104, 99, 133,
	161, 162, 98, 183, 89, 173, 87, 90, 172, 131,
	159, 165, 125, 122, 86, 163, 123, 121, 113, 102,
	107, 138, 120, 139, 108, 128, 127, 129, 0, 338,
	0, 154, 170, 184, 92, 353, 411, 176, 177, 178,
	179, 180, 0, 0, 93, 130, 91, 109, 151, 112,
	119, 143, 182, 135, 148, 96, 169, 152, 349, 352,
	347, 348, 386, 387, 421, 422, 423, 402, 344, 0,
	350, 351, 0, 406, 389, 81, 0, 116, 181, 142,
	103, 171, 415, 405, 0, 377, 418, 355, 369, 426,
	370, 371, 398, 341, 385, 134, 367, 0, 358, 336,
	364, 337, 356, 379, 101, 382, 354, 407, 388, 417,
	115, 424, 117, 393, 0, 153, 126, 0, 0, 381,
	409, 383, 403, 376, 399, 346, 392, 419, 368, 396,
	420, 0, 0, 0, 79, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 0, 395, 414, 366, 397, 335,
	394, 0, 339, 342, 425, 412, 361, 362, 0, 0,
	0, 0, 0, 0, 0, 380, 384, 400, 374, 0,
	0, 0, 0, 0, 0, 1073, 0, 359, 0, 391,
	0, 0, 0, 343, 340, 0, 0, 378, 0, 0,
	0, 345, 0, 360, 401, 0, 334, 404, 410, 375,
	199, 413, 373, 372, 416, 140, 0, 156, 106, 114,
	82, 88, 0, 105, 132, 145, 149, 408, 357, 365,
	97, 363, 147, 136, 168, 390, 137, 146, 118, 160,
	141, 167, 200, 175, 158, 174, 83, 157, 166, 95,
	150, 85, 164, 155, 124, 110, 111, 84, 0, 144,
	100, 104, 99, 133, 161, 162, 98, 183, 89, 173,
	87, 90, 172, 131, 159, 165, 125, 122, 86, 163,
	123, 121, 113, 102, 107, 138, 120, 139, 108, 128,
	127, 129, 0, 338, 0, 154, 170, 184, 92, 353,
	411, 176, 177, 178, 179, 180, 0, 0, 93, 130,
	91, 109, 151, 112, 119, 143, 182, 135, 148, 96,
	169, 152, 349, 352, 347, 348, 386, 387, 421, 422,
	423, 402, 344, 0, 350, 351, 0, 406, 389, 81,
	0, 116, 181, 142, 103, 171, 415, 405, 0, 377,
	418, 355, 369, 426, 370, 371, 398, 341, 385, 134,
	367, 0, 358, 336, 364, 337, 356, 379, 101, 382,
	354, 407, 388, 417, 115, 424, 117, 393, 0, 153,
	126, 0, 0, 381, 409, 383, 403, 376, 399, 346,
	392, 419, 368, 396, 420, 0, 0, 0, 254, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 0, 395,
	414, 366, 397, 335, 394, 0, 339, 342, 425, 412,
	361, 362, 0, 0, 0, 0, 0, 0, 0, 380,
	384, 400, 374, 0, 0, 0, 0, 0, 0, 734,
	0, 359, 0, 391, 0, 0, 0, 343, 340, 0,
	0, 378, 0, 0, 0, 345, 0, 360, 401, 0,
	334, 404, 410, 375, 199, 413, 373, 372, 416, 140,
	0, 156, 106, 114, 82, 88, 0, 105, 132, 145,
	149, 408, 357, 365, 97, 363, 147, 136, 168, 390,
	137, 146, 118, 160, 141, 167, 200, 175, 158, 174,
	83, 157, 166, 95, 150, 85, 164, 155, 124, 110,
	111, 84, 0, 144, 100, 104, 99, 133, 161, 162,
	98, 183, 89, 173, 87, 90, 172, 131, 159, 165,
	125, 122, 86, 163, 123, 121, 113, 102, 107, 138,
	120, 139, 108, 128, 127, 129, 0, 338, 0, 154,
	170, 184, 92, 353, 411, 176, 177, 178, 179, 180,
	0, 0, 93, 130, 91, 109, 151, 112, 119, 143,
	182, 135, 148, 96, 169, 152, 349, 352, 347, 348,
	386, 387, 421, 422, 423, 402, 344, 0, 350, 351,
	0, 406, 389, 81, 0, 116, 181, 142, 103, 171,
	415, 405, 0, 377, 418, 355, 369, 426, 370, 371,
	398, 341, 385, 134, 367, 0, 358, 336, 364, 337,
	356, 379, 101, 382, 354, 407, 388, 417, 115, 424,
	117, 393, 0, 153, 126, 0, 0, 381, 409, 383,
	403, 376, 399, 346, 392, 419, 368, 396, 420, 0,
	0, 0, 79, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 0, 395, 414, 366, 397, 335, 394, 0,
	339, 342, 425, 412, 361, 362, 0, 0, 0, 0,
	0, 0, 0, 380, 384, 400, 374, 0, 0, 0,
	0, 0, 0, 0, 0, 359, 0, 391, 0, 0,
	0, 343, 340, 0, 0, 378, 0, 0, 0, 345,
	0, 360, 401, 0, 334, 404, 410, 375, 199, 413,
	373, 372, 416, 140, 0, 156, 106, 114, 82, 88,
	0, 105, 132, 145, 149, 408, 357, 365, 97, 363,
	147, 136, 168, 390, 137, 146, 118, 160, 141, 167,
	200, 175, 158, 174, 83, 157, 166, 95, 150, 85,
	164, 155, 124, 110, 111, 84, 0, 144, 100, 104,
	99, 133, 161, 162, 98, 183, 89, 173, 87, 90,
	172, 131, 159, 165, 125, 122, 86, 163, 123, 121,
	113, 102, 107, 138, 120, 139, 108, 128, 127, 129,
	0, 338, 0, 154, 170, 184, 92, 353, 411, 176,
	177, 178, 179, 180, 0, 0, 93, 130, 91, 109,
	151, 112, 119, 143, 182, 135, 148, 96, 169, 152,
	349, 352, 347, 348, 386, 387, 421, 422, 423, 402,
	344, 0, 350, 351, 0, 406, 389, 81, 0, 116,
	181, 142, 103, 171, 415, 405, 0, 377, 418, 355,
	369, 426, 370, 371, 398, 341, 385, 134, 367, 0,
	358, 336, 364, 337, 356, 379, 101, 382, 354, 407,
	388, 417, 115, 424, 117, 393, 0, 153, 126, 0,
	0, 381, 409, 383, 403, 376, 399, 346, 392, 419,
	368, 396, 420, 0, 0, 0, 254, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 0, 395, 414, 366,
	397, 335, 394, 0, 339, 342, 425, 412, 361, 362,
	0, 0, 0, 0, 0, 0, 0, 380, 384, 400,
	374, 0, 0, 0, 0, 0, 0, 0, 0, 359,
	0, 391, 0, 0, 0, 343, 340, 0, 0, 378,
	0, 0, 0, 345, 0, 360, 401, 0, 334, 404,
	410, 375, 199, 413, 373, 372, 416, 140, 0, 156,
	106, 114, 82, 88, 0, 105, 132, 145, 149, 408,
	357, 365, 97, 363, 147, 136, 168, 390, 137, 146,
	118, 160, 141, 167, 200, 175, 158, 174, 83, 157,
	166, 95, 150, 85, 164, 155, 124, 110, 111, 84,
	0, 144, 100, 104, 99, 133, 161, 162, 98, 183,
	89, 173, 87, 90, 172, 131, 159, 165, 125, 122,
	86, 163, 123, 121, 113, 102, 107, 138, 120, 139,
	108, 128, 127, 129, 0, 338, 0, 154, 170, 184,
	92, 353, 411, 176, 177, 178, 179, 180, 0, 0,
	93, 130, 91, 109, 151, 112, 119, 143, 182, 135,
	148, 96, 169, 152, 349, 352, 347, 348, 386, 387,
	421, 422, 423, 402, 344, 0, 350, 351, 0, 406,
	389, 81, 0, 116, 181, 142, 103, 171, 415, 405,
	0, 377, 418, 355, 369, 426, 370, 371, 398, 341,
	385, 134, 367, 0, 358, 336, 364, 337, 356, 379,
	101, 382, 354, 407, 388, 417, 115, 424, 117, 393,
	0, 153, 126, 0, 0, 381, 409, 383, 403, 376,
	399, 346, 392, 419, 368, 396, 420, 0, 0, 0,
	79, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	0, 395, 414, 366, 397, 335, 394, 0, 339, 342,
	425, 412, 361, 362, 0, 0, 0, 0, 0, 0,
	0, 380, 384, 400, 374, 0, 0, 0, 0, 0,
	0, 0, 0, 359, 0, 391, 0, 0, 0, 343,
	340, 0, 0, 378, 0, 0, 0, 345, 0, 360,
	401, 0, 334, 404, 410, 375, 199, 413, 373, 372,
	416, 140, 0, 156, 106, 114, 82, 88, 0, 105,
	132, 145, 149, 408, 357, 365, 97, 363, 147, 136,
	168, 390, 137, 146, 118, 160, 141, 167, 200, 175,
	158, 174, 83, 157, 166, 95, 150, 85, 164, 155,
	124, 110, 111, 84, 0, 144, 100, 104, 99, 133,
	161, 162, 98, 183, 89, 173, 87, 332, 172, 131,
	159, 165, 125, 122, 86, 163, 123, 121, 113, 102,
	107, 138, 120, 139, 108, 128, 127, 129, 0, 338,
	0, 154, 170, 184, 92, 353, 411, 176, 177, 178,
	179, 180, 0, 0, 93, 333, 331, 109, 151, 112,
	119, 143, 182, 135, 148, 96, 169, 152, 349, 352,
	347, 348, 386, 387, 421, 422, 423, 402, 344, 0,
	350, 351, 0, 406, 389, 81, 0, 116, 181, 142,
	103, 171, 415, 405, 0, 377, 418, 355, 369, 426,
	370, 371, 398, 341, 385, 134, 367, 0, 358, 336,
	364, 337, 356, 379, 101, 382, 354, 407, 388, 417,
	115, 424, 117, 393, 0, 153, 126, 0, 0, 381,
	409, 383, 403, 376, 399, 346, 392, 419, 368, 396,
	420, 0, 0, 0, 197, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 0, 395, 414, 366, 397, 335,
	394, 0, 339, 342, 425, 412, 361, 362, 0, 0,
	0, 0, 0, 0, 0, 380, 384, 400, 374, 0,
	0, 0, 0, 0, 0, 0, 0, 359, 0, 391,
	0, 0, 0, 343, 340, 0, 0, 378, 0, 0,
	0, 345, 0, 360, 401, 0, 334, 404, 410, 375,
	199, 413, 373, 372, 416, 140, 0, 156, 106, 114,
	82, 88, 0, 105, 132, 145, 149, 408, 357, 365,
	97, 363, 147, 136, 168, 390, 137, 146, 118, 160,
	141, 167, 200, 175, 158, 174, 83, 157, 166, 95,
	150, 85, 164, 155, 124, 110, 111, 84, 0, 144,
	100, 104, 99, 133, 161, 162, 98, 183, 89, 173,
	87, 90, 172, 131, 159, 165, 125, 122, 86, 163,
	123, 121, 113, 102, 107, 138, 120, 139, 108, 128,
	127, 129, 0, 338, 0, 154, 170, 184, 92, 353,
	411, 176, 177, 178, 179, 180, 0, 0, 93, 130,
	91, 109, 151, 112, 119, 143, 182, 135, 148, 96,
	169, 152, 349, 352, 347, 348, 386, 387, 421, 422,
	423, 402, 344, 0, 350, 351, 0, 406, 389, 81,
	0, 116, 181, 142, 103, 171, 415, 405, 0, 377,
	418, 355, 369, 426, 370, 371, 398, 341, 385, 134,
	367, 0, 358, 336, 364, 337, 356, 379, 101, 382,
	354, 407, 388, 417, 115, 424, 117, 393, 0, 153,
	126, 0, 0, 381, 409, 383, 403, 376, 399, 346,
	392, 419, 368, 396, 420, 0, 0, 0, 79, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 0, 395,
	414, 366, 397, 335, 394, 0, 339, 342, 425, 412,
	361, 362, 0, 0, 0, 0, 0, 0, 0, 380,
	384, 400, 374, 0, 0, 0, 0, 0, 0, 0,
	0, 359, 0, 391, 0, 0, 0, 343, 340, 0,
	0, 378, 0, 0, 0, 345, 0, 360, 401, 0,
	334, 404, 410, 375, 199, 413, 373, 372, 416, 140,
	0, 156, 106, 114, 82, 88, 0, 105, 132, 145,
	149, 408, 357, 365, 97, 363, 147, 136, 168, 390,
	137, 146, 118, 160, 141, 167, 200, 175, 158, 174,
	83, 157, 609, 95, 150, 85, 164, 155, 124, 110,
	111, 84, 0, 144, 100, 104, 99, 133, 161, 162,
	98, 183, 89, 173, 87, 332, 172, 131, 159, 165,
	125, 122, 86, 163, 123, 121, 113, 102, 107, 138,
	120, 139, 108, 128, 127, 129, 0, 338, 0, 154,
	170, 184, 92, 353, 411, 176, 177, 178, 179, 180,
	0, 0, 93, 333, 331, 109, 151, 112, 119, 143,
	182, 135, 148, 96, 169, 152, 349, 352, 347, 348,
	386, 387, 421, 422, 423, 402, 344, 0, 350, 351,
	0, 406, 389, 81, 0, 116, 181, 142, 103, 171,
	415, 405, 0, 377, 418, 355, 369, 426, 370, 371,
	398, 341, 385, 134, 367, 0, 358, 336, 364, 337,
	356, 379, 101, 382, 354, 407, 388, 417, 115, 424,
	117, 393, 0, 153, 126, 0, 0, 381, 409, 383,
	403, 376, 399, 346, 392, 419, 368, 396, 420, 0,
	0, 0, 79, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 0, 395, 414, 366, 397, 335, 394, 0,
	339, 342, 425, 412, 361, 362, 0, 0, 0, 0,
	0, 0, 0, 380, 384, 400, 374, 0, 0, 0,
	0, 0, 0, 0, 0, 359, 0, 391, 0, 0,
	0, 343, 340, 0, 0, 378, 0, 0, 0, 345,
	0, 360, 401, 0, 334, 404, 410, 375, 199, 413,
	373, 372, 416, 140, 0, 156, 106, 114, 82, 88,
	0, 105, 132, 145, 149, 408, 357, 365, 97, 363,
	147, 136, 168, 390, 137, 146, 118, 160, 141, 167,
	200, 175, 158, 174, 83, 157, 323, 95, 150, 85,
	164, 155, 124, 110, 111, 84, 0, 144, 100, 104,
	99, 133, 161, 162, 98, 183, 89, 173, 87, 332,
	172, 131, 159, 165, 125, 122, 86, 163, 123, 121,
	113, 102, 107, 138, 120, 139, 108, 128, 127, 129,
	0, 338, 0, 154, 170, 184, 92, 353, 411, 176,
	177, 178, 179, 180, 0, 0, 93, 333, 331, 326,
	325, 112, 119, 143, 182, 135, 148, 96, 169, 152,
	349, 352, 347, 348, 386, 387, 421, 422, 423, 402,
	344, 0, 350, 351, 0, 406, 389, 81, 0, 116,
	181, 142, 103, 171, 134, 0, 0, 770, 0, 256,
	0, 0, 0, 101, 0, 253, 0, 0, 0, 115,
	296, 117, 0, 0, 153, 126, 0, 0, 0, 0,
	287, 288, 0, 0, 0, 0, 0, 0, 0, 0,
	52, 0, 0, 254, 275, 274, 277, 278, 279, 280,
	0, 0, 94, 276, 281, 282, 283, 0, 0, 251,
	268, 0, 295, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 265, 266, 247, 0, 0, 0, 307, 0,
	267, 0, 0, 262, 263, 264, 269, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 199,
	0, 0, 305, 0, 140, 0, 156, 106, 114, 82,
	88, 0, 105, 132, 145, 149, 0, 0, 0, 97,
	0, 147, 136, 168, 0, 137, 146, 118, 160, 141,
	167, 200, 175, 158, 174, 83, 157, 166, 95, 150,
	85, 164, 155, 124, 110, 111, 84, 0, 144, 100,
	104, 99, 133, 161, 162, 98, 183, 89, 173, 87,
	90, 172, 131, 159, 165, 125, 122, 86, 163, 123,
	121, 113, 102, 107, 138, 120, 139, 108, 128, 127,
	129, 0, 0, 0, 154, 170, 184, 92, 0, 0,
	176, 177, 178, 179, 180, 0, 0, 93, 130, 91,
	109, 151, 112, 119, 143, 182, 135, 148, 96, 169,
	152, 297, 306, 303, 304, 301, 302, 300, 299, 298,
	308, 289, 290, 291, 292, 294, 0, 293, 81, 0,
	116, 181, 142, 103, 171, 134, 0, 0, 0, 0,
	256, 0, 0, 0, 101, 0, 253, 0, 0, 0,
	115, 296, 117, 0, 0, 153, 126, 0, 0, 0,
	0, 287, 288, 0, 0, 0, 0, 0, 0, 0,
	0, 52, 0, 479, 254, 275, 274, 277, 278, 279,
	280, 0, 0, 94, 276, 281, 282, 283, 0, 0,
	251, 268, 0, 295, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 265, 266, 0, 0, 0, 0, 307,
	0, 267, 0, 0, 262, 263, 264, 269, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	199, 0, 0, 305, 0, 140, 0, 156, 106, 114,
	82, 88, 0, 105, 132, 145, 149, 0, 0, 0,
	97, 0, 147, 136, 168, 0, 137, 146, 118, 160,
	141, 167, 200, 175, 158, 174, 83, 157, 166, 95,
	150, 85, 164, 155, 124, 110, 111, 84, 0, 144,
	100, 104, 99, 133, 161, 162, 98, 183, 89, 173,
	87, 90, 172, 131, 159, 165, 125, 122, 86, 163,
	123, 121, 113, 102, 107, 138, 120, 139, 108, 128,
	127, 129, 0, 0, 0, 154, 170, 184, 92, 0,
	0, 176, 177, 178, 179, 180, 0, 0, 93, 130,
	91, 109, 151, 112, 119, 143, 182, 135, 148, 96,
	169, 152, 297, 306, 303, 304, 301, 302, 300, 299,
	298, 308, 289, 290, 291, 292, 294, 0, 293, 81,
	0, 116, 181, 142, 103, 171, 134, 0, 0, 0,
	0, 256, 0, 0, 0, 101, 0, 253, 0, 0,
	0, 115, 296, 117, 0, 0, 153, 126, 0, 0,
	0, 0, 287, 288, 0, 0, 0, 0, 0, 0,
	0, 0, 52, 0, 0, 254, 275, 274, 277, 278,
	279, 280, 0, 0, 94, 276, 281, 282, 283, 0,
	0, 251, 268, 0, 295, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 265, 266, 247, 0, 0, 0,
	307, 0, 267, 0, 0, 262, 263, 264, 269, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 199, 0, 0, 305, 0, 140, 0, 156, 106,
	114, 82, 88, 0, 105, 132, 145, 149, 0, 0,
	0, 97, 0, 147, 136, 168, 0, 137, 146, 118,
	160, 141, 167, 200, 175, 158, 174, 83, 157, 166,
	95, 150, 85, 164, 155, 124, 110, 111, 84, 0,
	144, 100, 104, 99, 133, 161, 162, 98, 183, 89,
	173, 87, 90, 172, 131, 159, 165, 125, 122, 86,
	163, 123, 121, 113, 102, 107, 138, 120, 139, 108,
	128, 127, 129, 0, 0, 0, 154, 170, 184, 92,
	0, 0, 176, 177, 178, 179, 180, 0, 0, 93,
	130, 91, 109, 151, 112, 119, 143, 182, 135, 148,
	96, 169, 152, 297, 306, 303, 304, 301, 302, 300,
	299, 298, 308, 289, 290, 291, 292, 294, 0, 293,
	81, 0, 116, 181, 142, 103, 171, 134, 0, 0,
	0, 0, 256, 0, 0, 0, 101, 0, 253, 0,
	0, 0, 115, 296, 117, 0, 0, 153, 126, 0,
	0, 0, 0, 287, 288, 0, 0, 0, 0, 0,
	0, 833, 0, 52, 0, 0, 254, 275, 274, 277,
	278, 279, 280, 0, 0, 94, 276, 281, 282, 283,
	0, 0, 251, 268, 0, 295, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 265, 266, 0, 0, 0,
	0, 307, 0, 267, 0, 0, 262, 263, 264, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 199, 0, 0, 305, 0, 140, 0, 156,
	106, 114, 82, 88, 0, 105, 132, 145, 149, 0,
	0, 0, 97, 0, 147, 136, 168, 0, 137, 146,
	118, 160, 141, 167, 200, 175, 158, 174, 83, 157,
	166, 95, 150, 85, 164, 155, 124, 110, 111, 84,
	0, 144, 100, 104, 99, 133, 161, 162, 98, 183,
	89, 173, 87, 90, 172, 131, 159, 165, 125, 122,
	86, 163, 123, 121, 113, 102, 107, 138, 120, 139,
	108, 128, 127, 129, 0, 0, 0, 154, 170, 184,
	92, 0, 0, 176, 177, 178, 179, 180, 0, 0,
	93, 130, 91, 109, 151, 112, 119, 143, 182, 135,
	148, 96, 169, 152, 297, 306, 303, 304, 301, 302,
	300, 299, 298, 308, 289, 290, 291, 292, 294, 23,
	293, 81, 0, 116, 181, 142, 103, 171, 0, 0,
	0, 134, 0, 0, 0, 0, 256, 0, 0, 0,
	101, 0, 253, 0, 0, 0, 115, 296, 117, 0,
	0, 153, 126, 0, 0, 0, 0, 287, 288, 0,
	0, 0, 0, 0, 0, 0, 0, 52, 0, 0,
	254, 275, 274, 277, 278, 279, 280, 0, 0, 94,
	276, 281, 282, 283, 0, 0, 251, 268, 0, 295,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 265,
	266, 0, 0, 0, 0, 307, 0, 267, 0, 0,
	262, 263, 264, 269, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 199, 0, 0, 305,
	0, 140, 0, 156, 106, 114, 82, 88, 0, 105,
	132, 145, 149, 0, 0, 0, 97, 0, 147, 136,
	168, 0, 137, 146, 118, 160, 141, 167, 200, 175,
	158, 174, 83, 157, 166, 95, 150, 85, 164, 155,
	124, 110, 111, 84, 0, 144, 100, 104, 99, 133,
	161, 162, 98, 183, 89, 173, 87, 90, 172, 131,
	159, 165, 125, 122, 86, 163, 123, 121, 113, 102,
	107, 138, 120, 139, 108, 128, 127, 129, 0, 0,
	0, 154, 170, 184, 92, 0, 0, 176, 177, 178,
	179, 180, 0, 0, 93, 130, 91, 109, 151, 112,
	119, 143, 182, 135, 148, 96, 169, 152, 297, 306,
	303, 304, 301, 302, 300, 299, 298, 308, 289, 290,
	291, 292, 294, 0, 293, 81, 0, 116, 181, 142,
	103, 171, 134, 0, 0, 0, 0, 256, 0, 0,
	0, 101, 0, 253, 0, 0, 0, 115, 296, 117,
	0, 0, 153, 126, 0, 0, 0, 0, 287, 288,
	0, 0, 0, 0, 0, 0, 0, 0, 52, 0,
	0, 254, 275, 274, 277, 278, 279, 280, 0, 0,
	94, 276, 281, 282, 283, 0, 0, 251, 268, 0,
	295, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	265, 266, 0, 0, 0, 0, 307, 0, 267, 0,
	0, 262, 263, 264, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 199, 0, 0,
	305, 0, 140, 0, 156, 106, 114, 82, 88, 0,
	105, 132, 145, 149, 0, 0, 0, 97, 0, 147,
	136, 168, 0, 137, 146, 118, 160, 141, 167, 200,
	175, 158, 174, 83, 157, 166, 95, 150, 85, 164,
	155, 124, 110, 111, 84, 0, 144, 100, 104, 99,
	133, 161, 162, 98, 183, 89, 173, 87, 90, 172,
	131, 159, 165, 125, 122, 86, 163, 123, 121, 113,
	102, 107, 138, 120, 139, 108, 128, 127, 129, 0,
	0, 0, 154, 170, 184, 92, 0, 0, 176, 177,
	178, 179, 180, 0, 0, 93, 130, 91, 109, 151,
	112, 119, 143, 182, 135, 148, 96, 169, 152, 297,
	306, 303, 304, 301, 302, 300, 299, 298, 308, 289,
	290, 291, 292, 294, 134, 293, 81, 0, 116, 181,
	142, 103, 171, 101, 0, 0, 0, 0, 0, 115,
	296, 117, 0, 0, 153, 126, 0, 0, 0, 0,
	287, 288, 0, 0, 0, 0, 0, 0, 0, 0,
	52, 0, 0, 254, 275, 274, 277, 278, 279, 280,
	0, 0, 94, 276, 281, 282, 283, 0, 0, 0,
	268, 0, 295, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 265, 266, 0, 0, 0, 0, 307, 0,
	267, 0, 0, 262, 263, 264, 269, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 199,
	0, 0, 305, 0, 140, 0, 156, 106, 114, 82,
	88, 0, 105, 132, 145, 149, 0, 0, 0, 97,
	0, 147, 136, 168, 1347, 137, 146, 118, 160, 141,
	167, 200, 175, 158, 174, 83, 157, 166, 95, 150,
	85, 164, 155, 124, 110, 111, 84, 0, 144, 100,
	104, 99, 133, 161, 162, 98, 183, 89, 173, 87,
	90, 172, 131, 159, 165, 125, 122, 86, 163, 123,
	121, 113, 102, 107, 138, 120, 139, 108, 128, 127,
	129, 0, 0, 0, 154, 170, 184, 92, 0, 0,
	176, 177, 178, 179, 180, 0, 0, 93, 130, 91,
	109, 151, 112, 119, 143, 182, 135, 148, 96, 169,
	152, 297, 306, 303, 304, 301, 302, 300, 299, 298,
	308, 289, 290, 291, 292, 294, 134, 293, 81, 0,
	116, 181, 142, 103, 171, 101, 0, 0, 0, 0,
	0, 115, 296, 117, 0, 0, 153, 126, 0, 0,
	0, 0, 287, 288, 0, 0, 0, 0, 0, 0,
	0, 0, 52, 0, 0, 254, 275, 274, 277, 278,
	279, 280, 0, 0, 94, 276, 281, 282, 283, 0,
	0, 0, 268, 0, 295, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 265, 266, 0, 0, 0, 0,
	307, 0, 267, 0, 0, 262, 263, 264, 269, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 199, 0, 0, 305, 0, 140, 0, 156, 106,
	114, 82, 88, 0, 105, 132, 145, 149, 0, 0,
	0, 97, 0, 147, 136, 168, 0, 137, 146, 118,
	160, 141, 167, 200, 175, 158, 174, 83, 157, 166,
	95, 150, 85, 164, 155, 124, 110, 111, 84, 0,
	144, 100, 104, 99, 133, 161, 162, 98, 183, 89,
	173, 87, 90, 172, 131, 159, 165, 125, 122, 86,
	163, 123, 121, 113, 102, 107, 138, 120, 139, 108,
	128, 127, 129, 0, 0, 0, 154, 170, 184, 92,
	0, 0, 176, 177, 178, 179, 180, 0, 0, 93,
	130, 91, 109, 151, 112, 119, 143, 182, 135, 148,
	96, 169, 152, 297, 306, 303, 304, 301, 302, 300,
	299, 298, 308, 289, 290, 291, 292, 294, 134, 293,
	81, 0, 116, 181, 142, 103, 171, 101, 0, 0,
	0, 0, 0, 115, 0, 117, 0, 0, 153, 126,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 79, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 513, 512, 522, 523, 515, 516, 517, 518,
	519, 520, 521, 514, 0, 0, 524, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 199, 0, 0, 0, 0, 140, 0,
	156, 106, 114, 82, 88, 0, 105, 132, 145, 149,
	0, 0, 0, 97, 0, 147, 136, 168, 0, 137,
	146, 118, 160, 141, 167, 200, 175, 158, 174, 83,
	157, 166, 95, 150, 85, 164, 155, 124, 110, 111,
	84, 0, 144, 100, 104, 99, 133, 161, 162, 98,
	183, 89, 173, 87, 90, 172, 131, 159, 165, 125,
	122, 86, 163, 123, 121, 113, 102, 107, 138, 120,
	139, 108, 128, 127, 129, 0, 0, 0, 154, 170,
	184, 92, 0, 0, 176, 177, 178, 179, 180, 0,
	0, 93, 130, 91, 109, 151, 112, 119, 143, 182,
	135, 148, 96, 169, 152, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 134, 0, 0, 0, 501, 0,
	0, 0, 81, 101, 116, 181, 142, 103, 171, 115,
	0, 117, 0, 0, 153, 126, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 79, 0, 503, 0, 0, 0, 0,
	0, 0, 94, 0, 0, 0, 0, 498, 497, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 499, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 199,
	0, 0, 0, 0, 140, 0, 156, 106, 114, 82,
	88, 0, 105, 132, 145, 149, 0, 0, 0, 97,
	0, 147, 136, 168, 0, 137, 146, 118, 160, 141,
	167, 200, 175, 158, 174, 83, 157, 166, 95, 150,
	85, 164, 155, 124, 110, 111, 84, 0, 144, 100,
	104, 99, 133, 161, 162, 98, 183, 89, 173, 87,
	90, 172, 131, 159, 165, 125, 122, 86, 163, 123,
	121, 113, 102, 107, 138, 120, 139, 108, 128, 127,
	129, 0, 0, 0, 154, 170, 184, 92, 0, 0,
	176, 177, 178, 179, 180, 0, 0, 93, 130, 91,
	109, 151, 112, 119, 143, 182, 135, 148, 96, 169,
	152, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	134, 0, 0, 0, 0, 0, 0, 0, 81, 101,
	116, 181, 142, 103, 171, 115, 0, 117, 0, 0,
	153, 126, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 79,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 0,
	0, 0, 0, 72, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 75, 76, 0, 71, 0, 0, 0, 77,
	140, 0, 156, 106, 114, 82, 88, 0, 105, 132,
	145, 149, 0, 0, 0, 97, 0, 147, 136, 168,
	0, 137, 146, 118, 160, 141, 167, 73, 175, 158,
	174, 83, 157, 166, 95, 150, 85, 164, 155, 124,
	110, 111, 84, 0, 144, 100, 104, 99, 133, 161,
	162, 98, 183, 89, 173, 87, 90, 172, 131, 159,
	165, 125, 122, 86, 163, 123, 121, 113, 102, 107,
	138, 120, 139, 108, 128, 127, 129, 0, 0, 0,
	154, 170, 184, 92, 0, 0, 176, 177, 178, 179,
	180, 0, 0, 93, 130, 91, 109, 151, 112, 119,
	143, 182, 135, 148, 96, 169, 152, 0, 74, 0,
	0, 0, 0, 0, 0, 0, 134, 0, 0, 0,
	598, 0, 0, 0, 81, 101, 116, 181, 142, 103,
	171, 115, 0, 117, 0, 0, 153, 126, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 197, 0, 600, 0, 0,
	0, 0, 0, 0, 94, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 199, 0, 0, 0, 0, 140, 0, 156, 106,
	114, 82, 88, 0, 105, 132, 145, 149, 0, 0,
	0, 97, 0, 147, 136, 168, 0, 137, 146, 118,
	160, 141, 167, 200, 175, 158, 174, 83, 157, 166,
	95, 150, 85, 164, 155, 124, 110, 111, 84, 0,
	144, 100, 104, 99, 133, 161, 162, 98, 183, 89,
	173, 87, 90, 172, 131, 159, 165, 125, 122, 86,
	163, 123, 121, 113, 102, 107, 138, 120, 139, 108,
	128, 127, 129, 0, 0, 0, 154, 170, 184, 92,
	0, 0, 176, 177, 178, 179, 180, 0, 0, 93,
	130, 91, 109, 151, 112, 119, 143, 182, 135, 148,
	96, 169, 152, 0, 0, 0, 23, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 134, 0,
	81, 0, 116, 181, 142, 103, 171, 101, 0, 0,
	0, 0, 0, 115, 0, 117, 0, 0, 153, 126,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 52, 0, 0, 79, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 199, 0, 0, 0, 0, 140, 0,
	156, 106, 114, 82, 88, 0, 105, 132, 145, 149,
	0, 0, 0, 97, 0, 147, 136, 168, 0, 137,
	146, 118, 160, 141, 167, 200, 175, 158, 174, 83,
	157, 166, 95, 150, 85, 164, 155, 124, 110, 111,
	84, 0, 144, 100, 104, 99, 133, 161, 162, 98,
	183, 89, 173, 87, 90, 172, 131, 159, 165, 125,
	122, 86, 163, 123, 121, 113, 102, 107, 138, 120,
	139, 108, 128, 127, 129, 0, 0, 0, 154, 170,
	184, 92, 0, 0, 176, 177, 178, 179, 180, 0,
	0, 93, 130, 91, 109, 151, 112, 119, 143, 182,
	135, 148, 96, 169, 152, 0, 0, 0, 23, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	134, 0, 81, 0, 116, 181, 142, 103, 171, 101,
	0, 0, 0, 0, 0, 115, 0, 117, 0, 0,
	153, 126, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 52, 0, 0, 197,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 199, 0, 0, 0, 0,
	140, 0, 156, 106, 114, 82, 88, 0, 105, 132,
	145, 149, 0, 0, 0, 97, 0, 147, 136, 168,
	0, 137, 146, 118, 160, 141, 167, 200, 175, 158,
	174, 83, 157, 166, 95, 150, 85, 164, 155, 124,
	110, 111, 84, 0, 144, 100, 104, 99, 133, 161,
	162, 98, 183, 89, 173, 87, 90, 172, 131, 159,
	165, 125, 122, 86, 163, 123, 121, 113, 102, 107,
	138, 120, 139, 108, 128, 127, 129, 0, 0, 0,
	154, 170, 184, 92, 0, 0, 176, 177, 178, 179,
	180, 0, 0, 93, 130, 91, 109, 151, 112, 119,
	143, 182, 135, 148, 96, 169, 152, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 134, 0, 0, 0,
	0, 0, 0, 0, 81, 101, 116, 181, 142, 103,
	171, 115, 0, 117, 0, 0, 153, 126, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 79, 0, 0, 721, 0,
	0, 722, 0, 0, 94, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 199, 0, 0, 0, 0, 140, 0, 156, 106,
	114, 82, 88, 0, 105, 132, 145, 149, 0, 0,
	0, 97, 0, 147, 136, 168, 0, 137, 146, 118,
	160, 141, 167, 200, 175, 158, 174, 83, 157, 166,
	95, 150, 85, 164, 155, 124, 110, 111, 84, 0,
	144, 100, 104, 99, 133, 161, 162, 98, 183, 89,
	173, 87, 90, 172, 131, 159, 165, 125, 122, 86,
	163, 123, 121, 113, 102, 107, 138, 120, 139, 108,
	128, 127, 129, 0, 0, 0, 154, 170, 184, 92,
	0, 0, 176, 177, 178, 179, 180, 0, 0, 93,
	130, 91, 109, 151, 112, 119, 143, 182, 135, 148,
	96, 169, 152, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 134, 0,
	81, 0, 116, 181, 142, 103, 171, 101, 0, 618,
	0, 0, 0, 115, 0, 117, 0, 0, 153, 126,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 79, 0, 617,
	0, 0, 0, 0, 0, 0, 94, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 199, 0, 0, 0, 0, 140, 0,
	156, 106, 114, 82, 88, 0, 105, 132, 145, 149,
	0, 0, 0, 97, 0, 147, 136, 168, 0, 137,
	146, 118, 160, 141, 167, 200, 175, 158, 174, 83,
	157, 166, 95, 150, 85, 164, 155, 124, 110, 111,
	84, 0, 144, 100, 104, 99, 133, 161, 162, 98,
	183, 89, 173, 87, 90, 172, 131, 159, 165, 125,
	122, 86, 163, 123, 121, 113, 102, 107, 138, 120,
	139, 108, 128, 127, 129, 0, 0, 0, 154, 170,
	184, 92, 0, 0, 176, 177, 178, 179, 180, 0,
	0, 93, 130, 91, 109, 151, 112, 119, 143, 182,
	135, 148, 96, 169, 152, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 134, 0, 0, 0, 598, 0,
	0, 0, 81, 101, 116, 181, 142, 103, 171, 115,
	0, 117, 0, 0, 153, 126, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 197, 0, 600, 0, 0, 0, 0,
	0, 0, 94, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 199,
	0, 0, 0, 0, 140, 0, 156, 106, 114, 82,
	88, 0, 105, 132, 145, 149, 0, 0, 0, 97,
	0, 147, 136, 168, 0, 596, 146, 118, 160, 141,
	167, 200, 175, 158, 174, 83, 157, 166, 95, 150,
	85, 164, 155, 124, 110, 111, 84, 0, 144, 100,
	104, 99, 133, 161, 162, 98, 183, 89, 173, 87,
	90, 172, 131, 159, 165, 125, 122, 86, 163, 123,
	121, 113, 102, 107, 138, 120, 139, 108, 128, 127,
	129, 0, 0, 0, 154, 170, 184, 92, 0, 0,
	176, 177, 178, 179, 180, 0, 0, 93, 130, 91,
	109, 151, 112, 119, 143, 182, 135, 148, 96, 169,
	152, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	134, 0, 0, 0, 0, 0, 0, 0, 81, 101,
	116, 181, 142, 103, 171, 115, 0, 117, 0, 0,
	153, 126, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 52, 0, 0, 197,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 199, 0, 0, 0, 0,
	140, 0, 156, 106, 114, 82, 88, 0, 105, 132,
	145, 149, 0, 0, 0, 97, 0, 147, 136, 168,
	0, 137, 146, 118, 160, 141, 167, 200, 175, 158,
	174, 83, 157, 166, 95, 150, 85, 164, 155, 124,
	110, 111, 84, 0, 144, 100, 104, 99, 133, 161,
	162, 98, 183, 89, 173, 87, 90, 172, 131, 159,
	165, 125, 122, 86, 163, 123, 121, 113, 102, 107,
	138, 120, 139, 108, 128, 127, 129, 0, 0, 0,
	154, 170, 184, 92, 0, 0, 176, 177, 178, 179,
	180, 0, 0, 93, 130, 91, 109, 151, 112, 119,
	143, 182, 135, 148, 96, 169, 152, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 134, 0, 0, 0,
	0, 0, 0, 0, 81, 101, 116, 181, 142, 103,
	171, 115, 0, 117, 0, 0, 153, 126, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 197, 0, 600, 0, 0,
	0, 0, 0, 0, 94, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 199, 0, 0, 0, 0, 140, 0, 156, 106,
	114, 82, 88, 0, 105, 132, 145, 149, 0, 0,
	0, 97, 0, 147, 136, 168, 0, 137, 146, 118,
	160, 141, 167, 200, 175, 158, 174, 83, 157, 166,
	95, 150, 85, 164, 155, 124, 110, 111, 84, 0,
	144, 100, 104, 99, 133, 161, 162, 98, 183, 89,
	173, 87, 90, 172, 131, 159, 165, 125, 122, 86,
	163, 123, 121, 113, 102, 107, 138, 120, 139, 108,
	128, 127, 129, 0, 0, 0, 154, 170, 184, 92,
	0, 0, 176, 177, 178, 179, 180, 0, 0, 93,
	130, 91, 109, 151, 112, 119, 143, 182, 135, 148,
	96, 169, 152, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 134, 0, 0, 0, 0, 0, 0, 0,
	81, 101, 116, 181, 142, 103, 171, 115, 0, 117,
	0, 0, 153, 126, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 79, 0, 503, 0, 0, 0, 0, 0, 0,
	94, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 199, 0, 0,
	0, 0, 140, 0, 156, 106, 114, 82, 88, 0,
	105, 132, 145, 149, 0, 0, 0, 97, 0, 147,
	136, 168, 0, 137, 146, 118, 160, 141, 167, 200,
	175, 158, 174, 83, 157, 166, 95, 150, 85, 164,
	155, 124, 110, 111, 84, 0, 144, 100, 104, 99,
	133, 161, 162, 98, 183, 89, 173, 87, 90, 172,
	131, 159, 165, 125, 122, 86, 163, 123, 121, 113,
	102, 107, 138, 120, 139, 108, 128, 127, 129, 0,
	0, 0, 154, 170, 184, 92, 0, 0, 176, 177,
	178, 179, 180, 0, 0, 93, 130, 91, 109, 151,
	112, 119, 143, 182, 135, 148, 96, 169, 152, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 134, 81, 0, 116, 181,
	142, 103, 171, 576, 101, 0, 0, 0, 0, 0,
	115, 0, 117, 0, 0, 153, 126, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 197, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	199, 0, 0, 0, 0, 140, 0, 156, 106, 114,
	82, 88, 0, 105, 132, 145, 149, 0, 0, 0,
	97, 0, 147, 136, 168, 0, 137, 146, 118, 160,
	141, 167, 200, 175, 158, 174, 83, 157, 166, 95,
	150, 85, 164, 155, 124, 110, 111, 84, 0, 144,
	100, 104, 99, 133, 161, 162, 98, 183, 89, 173,
	87, 90, 172, 131, 159, 165, 125, 122, 86, 163,
	123, 121, 113, 102, 107, 138, 120, 139, 108, 128,
	127, 129, 0, 0, 0, 154, 170, 184, 92, 0,
	0, 176, 177, 178, 179, 180, 0, 0, 93, 130,
	91, 109, 151, 112, 119, 143, 182, 135, 148, 96,
	169, 152, 0, 0, 318, 0, 0, 0, 0, 0,
	0, 134, 0, 0, 0, 0, 0, 0, 0, 81,
	101, 116, 181, 142, 103, 171, 115, 0, 117, 0,
	0, 153, 126, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	197, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 199, 0, 0, 0,
	0, 140, 0, 156, 106, 114, 82, 88, 0, 105,
	132, 145, 149, 0, 0, 0, 97, 0, 147, 136,
	168, 0, 137, 146, 118, 160, 141, 167, 200, 175,
	158, 174, 83, 157, 166, 95, 150, 85, 164, 155,
	124, 110, 111, 84, 0, 144, 100, 104, 99, 133,
	161, 162, 98, 183, 89, 173, 87, 90, 172, 131,
	159, 165, 125, 122, 86, 163, 123, 121, 113, 102,
	107, 138, 120, 139, 108, 128, 127, 129, 0, 0,
	0, 154, 170, 184, 92, 0, 0, 176, 177, 178,
	179, 180, 0, 0, 93, 130, 91, 109, 151, 112,
	119, 143, 182, 135, 148, 96, 169, 152, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 134, 0, 0,
	0, 0, 0, 0, 0, 81, 101, 116, 181, 142,
	103, 171, 115, 0, 117, 0, 0, 153, 126, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 197, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	194, 0, 199, 0, 0, 0, 0, 140, 0, 156,
	106, 114, 82, 88, 0, 105, 132, 145, 149, 0,
	0, 0, 97, 0, 147, 136, 168, 0, 137, 146,
	118, 160, 141, 167, 200, 175, 158, 174, 83, 157,
	166, 95, 150, 85, 164, 155, 124, 110, 111, 84,
	0, 144, 100, 104, 99, 133, 161, 162, 98, 183,
	89, 173, 87, 90, 172, 131, 159, 165, 125, 122,
	86, 163, 123, 121, 113, 102, 107, 138, 120, 139,
	108, 128, 127, 129, 0, 0, 0, 154, 170, 184,
	92, 0, 0, 176, 177, 178, 179, 180, 0, 0,
	93, 130, 91, 109, 151, 112, 119, 143, 182, 135,
	148, 96, 169, 152, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 134, 0, 0, 0, 0, 0, 0,
	0, 81, 101, 116, 181, 142, 103, 171, 115, 0,
	117, 0, 0, 153, 126, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 79, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 199, 0,
	0, 0, 0, 140, 0, 156, 106, 114, 82, 88,
	0, 105, 132, 145, 149, 0, 0, 0, 97, 0,
	147, 136, 168, 0, 137, 146, 118, 160, 141, 167,
	200, 175, 158, 174, 83, 157, 166, 95, 150, 85,
	164, 155, 124, 110, 111, 84, 0, 144, 100, 104,
	99, 133, 161, 162, 98, 183, 89, 173, 87, 90,
	172, 131, 159, 165, 125, 122, 86, 163, 123, 121,
	113, 102, 107, 138, 120, 139, 108, 128, 127, 129,
	0, 0, 0, 154, 170, 184, 92, 0, 0, 176,
	177, 178, 179, 180, 0, 0, 93, 130, 91, 109,
	151, 112, 119, 143, 182, 135, 148, 96, 169, 152,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 134,
	0, 0, 0, 0, 0, 0, 0, 81, 101, 116,
	181, 142, 103, 171, 115, 0, 117, 0, 0, 153,
	126, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 197, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 199, 0, 0, 0, 0, 140,
	0, 156, 106, 114, 82, 88, 0, 105, 132, 145,
	149, 0, 0, 0, 97, 0, 147, 136, 168, 0,
	137, 146, 118, 160, 141, 167, 200, 175, 158, 174,
	83, 157, 166, 95, 150, 85, 164, 155, 124, 110,
	111, 84, 0, 144, 100, 104, 99, 133, 161, 162,
	98, 183, 89, 173, 87, 90, 172, 131, 159, 165,
	125, 122, 86, 163, 123, 121, 113, 102, 107, 138,
	120, 139, 108, 128, 127, 129, 0, 0, 0, 154,
	170, 184, 92, 0, 0, 176, 177, 178, 179, 180,
	0, 0, 93, 130, 91, 109, 151, 112, 119, 143,
	182, 135, 148, 96, 169, 152, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 134, 0, 0, 0, 0,
	0, 0, 0, 81, 101, 116, 181, 142, 103, 171,
	115, 0, 117, 0, 0, 153, 126, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 254, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	199, 0, 0, 0, 0, 140, 0, 156, 106, 114,
	82, 88, 0, 105, 132, 145, 149, 0, 0, 0,
	97, 0, 147, 136, 168, 0, 137, 146, 118, 160,
	141, 167, 200, 175, 158, 174, 83, 157, 166, 95,
	150, 85, 164, 155, 124, 110, 111, 84, 0, 144,
	100, 104, 99, 133, 161, 162, 98, 183, 89, 173,
	87, 90, 172, 131, 159, 165, 125, 122, 86, 163,
	123, 121, 113, 102, 107, 138, 120, 139, 108, 128,
	127, 129, 0, 0, 0, 154, 170, 184, 92, 0,
	0, 176, 177, 178, 179, 180, 0, 0, 93, 130,
	91, 109, 151, 112, 119, 143, 182, 135, 148, 96,
	169, 152, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 81,
	0, 116, 181, 142, 103, 171,
}
var yyPact = [...]int{

	1474, -1000, -190, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 862, 900, -1000, -1000, -1000, -1000, -1000, -1000, 213,
	7652, 73, 97, -15, 10389, 95, 1518, 10841, -1000, -6,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -95, -109, 659,
	-1000, -1000, -1000, -1000, -1000, 855, 860, 722, 849, 790,
	-1000, 5778, 50, 9252, 10163, 5055, -1000, -1000, 194, 10841,
	90, 10841, -158, 10615, 58, 58, 58, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 94, 10841, -1000, 10841, 56,
	502, 56, 56, 56, 10841, -1000, 129, -1000, -1000, -1000,
	-1000, 10841, 497, 820, 37, 3023, 3023, 3023, 3023, 4,
	3023, -93, 735, 872, -1000, -1000, -1000, -1000, -1000, 3023,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 415, 826, 6504, 6504, 862, -1000, 659, -1000,
	-1000, -1000, 817, -1000, -1000, 291, 878, -1000, 7426, 123,
	-1000, 6504, 1891, 423, -1000, -1000, 423, -1000, -1000, 110,
	-1000, -1000, 6968, 6968, 6968, 6968, 6968, 6968, 6968, 6968,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 423, -1000, 6263, 423, 423, 423,
	423, 423, 423, 423, 423, 6504, 423, 423, 423, 423,
	423, 423, 423, 423, 423, 423, 423, 423, 423, 9937,
	671, 751, -1000, -1000, -1000, 846, 8342, 9026, 10841, 565,
	-1000, 679, 4801, -111, -1000, -1000, -1000, 214, 8800, -1000,
	-1000, -1000, 819, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 643, 10841, -1000,
	1975, -1000, 478, 3023, 77, 661, 476, 234, 473, 10841,
	10841, 3023, 61, 10841, 844, 734, 10841, 444, 442, -1000,
	4547, -1000, 3023, 3023, 3023, 3023, 3023, 3023, 3023, 3023,
	-1000, -1000, -1000, -1000, -1000, -1000, 3023, 3023, -1000, 875,
	236, -1000, -1000, 10841, 6504, -1000, -1000, -1000, -1000, -1000,
	-1000, 895, 155, 391, 122, 681, -1000, 276, 855, 415,
	790, 8568, 745, -1000, -1000, 10841, -1000, 6504, 6504, 272,
	-1000, 9704, -1000, -1000, 3531, 167, 6968, 315, 215, 6968,
	6968, 6968, 6968, 6968, 6968, 6968, 6968, 6968, 6968, 6968,
	6968, 6968, 6968, 6968, 345, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 438, -1000, 659, 480, 480, 139, 139,
	139, 139, 139, 139, 139, 7200, 5296, 415, 641, 312,
	6263, 5778, 5778, 6504, 6504, 11067, 11067, 5778, 850, 217,
	312, 11067, -1000, 415, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 5778, 5778, 5778, 5778, 16, 10841, -1000, 11067, 9252,
	9252, 9252, 9252, 9252, -1000, 759, 756, -1000, 772, 768,
	779, 10841, -1000, 556, 8342, 143, 423, -1000, 9478, -1000,
	-1000, 16, 554, 9252, 10841, -1000, -1000, 4293, 679, -111,
	670, -1000, -136, -116, 6019, 125, -1000, -1000, -1000, -1000,
	2769, 144, 542, 309, -87, -1000, -1000, -1000, 694, -1000,
	694, 694, 694, 694, -53, -53, -53, -53, -1000, -1000,
	-1000, -1000, -1000, 709, 707, -1000, 694, 694, 694, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 701, 701, 701, 695, 695,
	719, -1000, 10841, -174, 434, 3023, 843, 3023, -1000, 64,
	-1000, 10841, -1000, -1000, 10841, 3023, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 10841, 242, 10841, 10841, -1000, 312, -1000, 773, 6504,
	6504, 4039, 6504, -1000, -1000, -1000, 826, -1000, 850, 863,
	-1000, 810, 808, 5778, -1000, -1000, 167, 181, -1000, -1000,
	264, -1000, -1000, -1000, -1000, 121, 423, -1000, 1992, -1000,
	-1000, -1000, -1000, 315, 6968, 6968, 6968, 322, 1992, 2108,
	1254, 1929, 139, 405, 405, 158, 158, 158, 158, 158,
	295, 295, -1000, -1000, -1000, 415, -1000, -1000, -1000, 415,
	5778, 678, -1000, -1000, 6504, -1000, 415, 541, 541, 355,
	240, 713, -1000, 118, 712, 541, 5778, 237, -1000, 6504,
	415, -1000, 541, 415, 541, 541, 673, 423, -1000, 699,
	-1000, 210, 751, 725, 732, 580, -1000, -1000, -1000, -1000,
	748, -1000, 747, -1000, -1000, -1000, -1000, -1000, 88, 83,
	82, 10615, -1000, 869, 9252, 682, -1000, -1000, 670, -111,
	-139, -1000, -1000, -1000, 312, -1000, 376, 663, 2515, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 698, 421, -1000, 834,
	171, 160, 393, 833, -1000, -1000, -1000, 825, -1000, 252,
	-91, -1000, -1000, 371, -53, -53, -1000, -1000, 125, 816,
	125, 125, 125, 406, 406, -1000, -1000, -1000, -1000, 351,
	-1000, -1000, -1000, 346, -1000, 730, 10615, 3023, -1000, 3785,
	-1000, -1000, -1000, -1000, -1000, -1000, 231, 208, 175, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	15, -1000, 3023, -1000, 236, -1000, 402, 6504, -1000, -1000,
	798, 312, 312, 116, -1000, -1000, 10841, -1000, -1000, -1000,
	-1000, 677, -1000, -1000, -1000, 3277, 5778, -1000, 322, 1992,
	1970, -1000, 6968, 6968, -1000, -1000, 541, 5778, 312, -1000,
	-1000, -1000, 49, 345, 49, 6968, 6968, 4039, 6968, 6968,
	-168, 685, 223, -1000, 6504, 422, -1000, -1000, -1000, -1000,
	-1000, 729, 11067, 423, -1000, 8110, 10615, 862, 11067, 6504,
	6504, -1000, -1000, 6504, 697, -1000, 6504, -1000, -1000, -1000,
	423, 423, 423, 517, -1000, 862, 682, -1000, -1000, -1000,
	-140, -134, -1000, -1000, -1000, 2769, -1000, 2769, 10615, 38,
	-1000, 393, 393, -1000, -1000, -1000, 696, 728, 42, -1000,
	-1000, -1000, 531, 125, 125, -1000, 185, -1000, -1000, -1000,
	534, -1000, 530, 660, 523, 10841, -1000, -1000, 657, -1000,
	204, -1000, -1000, 10615, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 10615, 10841, -1000, -1000,
	-1000, -1000, -1000, 10615, -1000, 242, -1000, 312, -1000, 3785,
	-1000, 869, 9252, -1000, -1000, 415, -1000, 6968, 1992, 1992,
	-1000, -1000, 415, 694, 694, -1000, 694, 695, -1000, 694,
	-21, 694, -22, 415, 415, 1461, 1851, -1000, 426, 1719,
	423, -165, -1000, 312, 6504, -1000, 836, 561, 576, -1000,
	-1000, 5537, 415, 519, 114, 517, 855, -1000, 312, 312,
	312, 10615, 312, 10615, 10615, 10615, 7878, 10615, 855, -1000,
	-1000, -1000, -1000, 2515, -1000, 515, -1000, 694, -1000, -1000,
	-1000, 10615, -82, 894, -1000, -1000, -1000, -1000, 692, -1000,
	-1000, -1000, -1000, -1000, -1000, -53, 390, -53, 328, -1000,
	321, 3023, 3785, 2769, -1000, 684, -1000, -1000, -1000, -1000,
	838, -1000, 866, 655, -1000, 1992, -1000, -1000, 72, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 6968, 6968,
	-1000, 6968, 6968, 6968, 415, 389, 312, 832, -1000, 423,
	-1000, -1000, 675, 10615, 10615, -1000, -1000, 510, -1000, 495,
	495, 495, 143, -1000, -1000, 120, 10615, -1000, 489, 148,
	-1000, -148, 507, 125, -1000, 125, 505, 496, -1000, -1000,
	-1000, 10615, 423, 864, 859, -1000, -1000, 1698, 1698, 1698,
	1698, 43, -1000, -1000, 890, -1000, 423, -1000, 659, 108,
	-1000, 10615, -1000, -1000, -1000, -1000, -1000, 120, -1000, 348,
	182, 380, -1000, 28, 255, 830, -1000, 828, 676, -1000,
	-1000, -1000, -1000, -1000, 460, 14, -1000, 6504, 6504, -1000,
	-1000, -1000, -1000, 415, 34, -178, 11067, 576, 415, 10615,
	-1000, -1000, -1000, 318, -1000, -1000, 10841, -1000, 378, -1000,
	-1000, 481, 661, 420, -1000, 10615, 312, 572, -1000, 797,
	-172, -181, 545, -1000, -1000, -1000, 581, -1000, -1000, -174,
	-1000, 14, 806, -1000, 789, -1000, 10615, -1000, -1000, 8,
	-175, 414, 5, -179, 727, 423, -182, 714, -1000, 892,
	6736, -1000, -1000, 886, 147, 147, 1698, 415, -1000, -1000,
	-1000, 45, 317, -1000, -1000, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1133, 50, 473, 1123, 1121, 1120, 1119, 1117, 1116,
	1114, 1113, 1112, 1111, 1110, 1109, 1108, 1106, 1105, 1104,
	1102, 1101, 1095, 1094, 125, 1090, 1087, 1084, 60, 1083,
	58, 1080, 1079, 36, 260, 44, 34, 116, 1078, 26,
	97, 111, 1077, 46, 1076, 1075, 68, 1074, 73, 1072,
	1071, 243, 1069, 1068, 13, 17, 1067, 1066, 1065, 1063,
	56, 921, 1062, 1061, 1060, 1059, 1056, 1054, 48, 3,
	11, 9, 15, 1053, 883, 112, 1052, 45, 1051, 1048,
	1046, 1045, 59, 1043, 49, 1042, 20, 47, 1032, 6,
	57, 33, 21, 7, 67, 52, 1023, 28, 55, 43,
	1022, 1020, 389, 1018, 1017, 37, 1016, 22, 132, 436,
	1015, 1013, 1012, 1011, 29, 0, 536, 963, 62, 1005,
	1002, 1001, 1336, 63, 61, 18, 1000, 123, 30, 32,
	988, 985, 42, 979, 974, 973, 972, 971, 969, 968,
	126, 961, 960, 959, 133, 25, 958, 956, 54, 19,
	955, 954, 951, 39, 53, 942, 940, 41, 27, 939,
	935, 934, 926, 924, 24, 16, 923, 12, 922, 10,
	920, 23, 919, 2, 917, 14, 915, 8, 912, 4,
	40, 1, 911, 5, 910, 909, 349, 171, 908, 907,
	71,
}
var yyR1 = [...]int{

	0, 184, 185, 185, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 6, 3, 4, 4,
	5, 5, 7, 7, 27, 27, 8, 9, 9, 9,
	188, 188, 46, 46, 90, 90, 10, 10, 10, 10,
	95, 95, 99, 99, 99, 100, 100, 100, 100, 130,
	130, 11, 11, 11, 11, 11, 11, 11, 11, 179,
	179, 178, 177, 177, 176, 176, 175, 16, 160, 162,
	162, 161, 161, 161, 161, 154, 133, 133, 133, 133,
	136, 136, 134, 134, 134, 134, 134, 134, 134, 135,
	135, 135, 135, 135, 137, 137, 137, 137, 137, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 139, 139, 139, 139, 139, 139,
	139, 139, 153, 153, 140, 140, 148, 148, 149, 149,
	149, 146, 146, 147, 147, 150, 150, 150, 141, 141,
	141, 141, 141, 141, 141, 141, 143, 143, 143, 151,
	151, 144, 144, 144, 145, 145, 145, 152, 152, 152,
	152, 152, 142, 142, 155, 155, 170, 170, 169, 169,
	169, 159, 159, 166, 166, 166, 166, 166, 157, 157,
	158, 158, 168, 168, 167, 156, 156, 171, 171, 171,
	171, 182, 183, 181, 181, 181, 181, 181, 163, 163,
	163, 164, 164, 164, 165, 165, 165, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 180, 180, 180, 180,
	180, 180, 180, 180, 180, 180, 180, 174, 172, 172,
	173, 173, 13, 14, 14, 14, 14, 14, 15, 15,
	17, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 106, 106,
	104, 104, 105, 105, 105, 107, 107, 107, 131, 131,
	131, 19, 19, 21, 21, 22, 23, 20, 20, 20,
	20, 20, 20, 20, 189, 24, 25, 25, 26, 26,
	26, 30, 30, 30, 28, 28, 29, 29, 35, 35,
	34, 34, 36, 36, 36, 36, 119, 119, 119, 118,
	118, 38, 38, 39, 39, 40, 40, 41, 41, 41,
	53, 53, 89, 89, 91, 91, 42, 42, 42, 42,
	43, 43, 44, 44, 45, 45, 126, 126, 125, 125,
	125, 124, 124, 47, 47, 47, 49, 48, 48, 48,
	48, 50, 50, 52, 52, 51, 51, 54, 54, 54,
	54, 55, 55, 37, 37, 37, 37, 37, 37, 37,
	103, 103, 57, 57, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 67, 67, 67, 67, 67, 67,
	58, 58, 58, 58, 58, 58, 58, 33, 33, 68,
	68, 68, 74, 69, 69, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 65, 65, 65,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 64, 64, 64, 64, 64,
	64, 64, 64, 190, 190, 66, 66, 66, 66, 31,
	31, 31, 31, 31, 129, 129, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 78,
	78, 32, 32, 76, 76, 77, 79, 79, 75, 75,
	75, 60, 60, 60, 60, 60, 60, 60, 60, 62,
	62, 62, 80, 80, 81, 81, 82, 82, 83, 83,
	84, 85, 85, 85, 86, 86, 86, 86, 87, 87,
	87, 59, 59, 59, 59, 59, 59, 88, 88, 88,
	88, 92, 92, 70, 70, 72, 72, 71, 73, 93,
	93, 97, 94, 94, 98, 98, 98, 96, 96, 96,
	121, 121, 121, 101, 101, 108, 108, 109, 109, 102,
	102, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 111, 111, 111, 112, 112, 113, 113, 113, 120,
	120, 116, 116, 117, 117, 122, 122, 123, 123, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 186, 187,
	127, 128, 128, 128,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 4, 6, 7, 5, 10, 1, 3,
	1, 3, 7, 8, 1, 1, 8, 8, 7, 6,
	1, 1, 1, 3, 0, 4, 3, 4, 5, 4,
	1, 3, 3, 2, 2, 2, 2, 2, 1, 1,
	1, 2, 2, 8, 4, 6, 5, 5, 5, 0,
	2, 1, 0, 2, 1, 3, 3, 4, 4, 2,
	4, 1, 3, 3, 3, 8, 3, 1, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 2, 2, 2, 1, 4,
	4, 2, 2, 3, 3, 3, 3, 1, 1, 1,
	1, 1, 6, 6, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 3, 0, 5, 0, 3,
	5, 0, 1, 0, 1, 0, 1, 2, 0, 2,
	2, 2, 2, 2, 4, 2, 0, 3, 5, 0,
	1, 0, 3, 3, 0, 2, 2, 0, 2, 1,
	2, 1, 0, 2, 5, 4, 1, 2, 2, 3,
	2, 0, 1, 2, 3, 3, 2, 2, 1, 1,
	0, 1, 1, 3, 2, 3, 1, 10, 11, 11,
	12, 3, 3, 1, 1, 2, 2, 2, 0, 1,
	3, 1, 2, 3, 1, 1, 1, 6, 7, 7,
	12, 7, 7, 7, 4, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 7, 1, 3,
	8, 8, 5, 4, 6, 5, 4, 4, 3, 2,
	3, 4, 4, 4, 4, 4, 4, 4, 4, 3,
	3, 3, 3, 4, 3, 7, 5, 4, 2, 2,
	4, 4, 2, 2, 2, 2, 2, 3, 1, 1,
	0, 1, 0, 2, 2, 0, 2, 2, 0, 1,
	1, 2, 1, 1, 2, 1, 1, 2, 2, 2,
	2, 2, 3, 3, 0, 2, 0, 2, 1, 2,
	2, 0, 1, 1, 0, 1, 0, 1, 0, 1,
	1, 3, 1, 2, 3, 5, 0, 1, 2, 1,
	1, 0, 2, 1, 3, 1, 1, 1, 3, 3,
	3, 7, 1, 3, 1, 3, 4, 4, 4, 3,
	2, 4, 0, 1, 0, 2, 0, 1, 0, 1,
	2, 1, 1, 1, 2, 2, 1, 2, 3, 2,
	3, 2, 2, 2, 1, 1, 3, 0, 5, 5,
	5, 0, 2, 1, 3, 3, 2, 3, 1, 2,
	0, 3, 1, 1, 3, 3, 4, 4, 5, 3,
	4, 5, 6, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	1, 1, 3, 1, 3, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 2, 2, 2,
	2, 2, 3, 1, 1, 1, 1, 4, 5, 6,
	4, 4, 6, 6, 6, 6, 8, 8, 6, 8,
	8, 9, 7, 5, 4, 2, 2, 2, 2, 2,
	2, 2, 2, 0, 2, 4, 4, 4, 4, 0,
	3, 4, 7, 3, 1, 1, 2, 3, 3, 1,
	2, 2, 1, 2, 1, 2, 2, 1, 2, 0,
	1, 0, 2, 1, 2, 4, 0, 2, 1, 3,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 0, 3, 0, 2, 0, 3, 1, 3,
	2, 0, 1, 1, 0, 2, 4, 4, 0, 2,
	4, 2, 1, 3, 5, 4, 6, 1, 3, 3,
	5, 0, 5, 1, 3, 1, 2, 3, 1, 1,
	3, 3, 1, 3, 3, 3, 3, 1, 2, 1,
	1, 1, 1, 1, 1, 0, 2, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 1, 1, 0, 1, 1, 0,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -184, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 30, -16,
	114, 115, 117, 116, 147, 118, 140, 50, 159, 160,
	162, 163, 25, 141, 142, 145, 146, 31, 32, -186,
	8, 244, 54, -185, 259, -82, 15, -26, 5, -24,
	-189, -24, -24, -24, -24, -24, -160, -162, 54, 89,
	-113, 123, 71, 155, 236, 120, 121, 127, -116, 57,
	-115, 252, 133, 159, 170, 164, 191, 183, 134, 181,
	184, 223, 211, 221, 66, 162, 232, 143, 179, 175,
	173, 27, 196, 257, 174, 136, 131, 197, 201, 224,
	168, 169, 226, 195, 132, 33, 254, 35, 151, 227,
	199, 194, 190, 193, 167, 189, 39, 203, 202, 204,
	222, 186, 137, 176, 18, 230, 146, 149, 198, 200,
	128, 153, 256, 228, 172, 138, 150, 145, 231, 139,
	163, 225, 234, 38, 208, 166, 130, 160, 157, 187,
	152, 177, 178, 192, 165, 188, 161, 154, 147, 233,
	209, 258, 185, 182, 158, 156, 214, 215, 216, 217,
	218, 255, 229, 180, 210, -102, 123, 125, 121, 121,
	122, 123, 236, 120, 121, -51, -122, 57, -115, 123,
	155, 121, 107, 184, 114, 212, 122, 33, 153, -131,
	121, -104, 156, 211, 214, 215, 216, 218, 217, 57,
	225, 224, 219, -122, 161, -127, -127, -127, -127, -127,
	213, 213, -2, -86, 17, 16, -5, -3, -186, 6,
	20, 21, -30, 40, 41, -25, -36, 98, -37, -122,
	-56, 73, -61, 29, 57, -115, 23, -60, -57, -75,
	-73, -74, 107, 108, 109, 96, 97, 104, 74, 110,
	-65, -63, -64, -66, 59, 58, 67, 60, 61, 62,
	63, 68, 69, 70, -116, -71, -186, 44, 45, 245,
	246, 247, 248, 251, 249, 76, 34, 235, 243, 242,
	241, 239, 240, 237, 238, 126, 236, 102, 244, -102,
	-39, -40, -41, -42, -53, -74, -186, -51, 11, -46,
	-51, -94, -130, 161, -98, 225, 224, -117, -96, -116,
	-114, 223, 184, 222, 119, 72, 22, 24, 206, 75,
	107, 16, 76, 106, 245, 114, 48, 237, 238, 235,
	247, 248, 236, 212, 29, 10, 25, 141, 21, 100,
	116, 79, 80, 144, 23, 142, 70, 19, 51, 11,
	13, 14, 126, 125, 91, 122, 46, 8, 110, 26,
	88, 42, 28, 44, 89, 17, 239, 240, 31, 251,
	148, 102, 49, 36, 73, 68, 52, 71, 15, 47,
	90, 117, 244, 45, 120, 6, 250, 30, 140, 43,
	121, 213, 78, 124, 69, 5, 127, 32, 9, 50,
	53, 241, 242, 243, 34, 77, 12, -161, 89, -154,
	57, -51, 122, -51, 244, -116, -109, 126, -109, -109,
	121, -51, -51, -108, 126, 57, -108, -108, -108, -51,
	111, -51, 57, 30, 236, 57, 153, 121, 154, 123,
	-128, -186, -117, -128, -128, -128, 157, 158, -128, 221,
	-106, 213, 220, 52, 12, -128, -127, -127, -187, 56,
	-87, 19, 31, -37, -122, -83, -84, -37, -82, -2,
	-24, 36, -28, 21, 65, 11, -119, 72, 71, 88,
	-118, 22, -116, 59, 111, -37, -58, 91, 73, 89,
	90, 75, 93, 92, 103, 96, 97, 98, 99, 100,
	101, 102, 94, 95, 106, 81, 82, 83, 84, 85,
	86, 87, -103, -186, -74, -186, 112, 113, -61, -61,
	-61, -61, -61, -61, -61, -61, -186, -2, -69, -37,
	-186, -186, -186, -186, -186, -186, -186, -186, -186, -78,
	-37, -186, -190, -186, -190, -190, -190, -190, -190, -190,
	-190, -186, -186, -186, -186, -52, 26, -51, 30, 55,
	-47, -49, -48, -50, 42, 46, 48, 43, 44, 45,
	49, -126, 22, -39, -186, -125, 149, -124, 22, -122,
	59, -51, -46, -188, 55, 11, 53, 55, -94, 161,
	-95, -99, 226, 228, 81, -121, -116, 59, 29, 30,
	56, 55, -51, -133, -136, -138, -137, -139, -134, -135,
	181, 182, 107, 185, 187, 188, 189, 190, 191, 192,
	193, 194, 195, 196, 30, 143, 177, 178, 179, 180,
	197, 198, 199, 200, 201, 202, 203, 204, 164, 165,
	166, 167, 168, 169, 170, 172, 173, 174, 175, 176,
	57, -128, 123, -179, 53, 57, 73, 57, -51, -51,
	-128, 124, -51, 23, 52, -51, 57, 57, -123, -122,
	-114, -128, -128, -128, -128, -128, -128, -128, -128, -128,
	-128, 11, -105, 11, 91, -51, -37, 9, 91, 55,
	18, 111, 55, -85, 24, 25, -86, -187, -30, -62,
	-116, 60, 63, -29, 43, -51, -37, -37, -67, 68,
	73, 69, 70, -118, 98, -123, -117, -114, -61, -68,
	-71, -74, 64, 91, 89, 90, 75, -61, -61, -61,
	-61, -61, -61, -61, -61, -61, -61, -61, -61, -61,
	-61, -61, -129, 57, 59, 57, -60, -60, -116, -35,
	21, -34, -36, -187, 55, -187, -2, -34, -34, -37,
	-37, -75, -116, -122, -75, -34, -28, -76, -77, 77,
	-75, -187, -34, -35, -34, -34, -90, 149, -51, -93,
	-97, -75, -40, -41, -41, -40, -41, 42, 42, 42,
	47, 42, 47, 42, -48, -122, -187, -54, 50, 125,
	51, -186, -124, -90, 53, -39, -51, -98, -95, 55,
	227, 229, 230, 52, -37, -145, 106, -163, -164, -165,
	-117, 59, 60, -154, -155, -156, -166, 135, -171, 128,
	130, 127, -157, 136, 122, 28, 56, -150, 68, 73,
	-146, 209, -140, 54, -140, -140, -140, -140, -144, 184,
	-144, -144, -144, 54, 54, -140, -140, -140, -148, 54,
	-148, -148, -149, 54, -149, -120, 53, -51, -177, 255,
	-178, 57, -128, 23, -128, -110, 119, 116, 117, -174,
	115, 206, 184, 66, 29, 15, 245, 149, 258, 57,
	150, -51, -51, -128, -51, -107, 89, 12, -122, -122,
	38, -37, -37, -123, -84, -87, -101, 19, 11, 34,
	34, -34, 68, 69, 70, 111, -186, -68, -61, -61,
	-61, -33, 144, 72, -187, -187, -34, 55, -37, -187,
	-187, -187, 55, 53, 22, 55, 11, 111, 55, 11,
	-187, -34, -79, -77, 79, -37, -187, -187, -187, -187,
	-187, -59, 30, 34, -2, -186, -186, -55, 55, 12,
	81, -44, -43, 52, 53, -45, 52, -43, 42, 42,
	122, 122, 122, -91, -116, -55, -39, -55, -99, -100,
	231, 228, 234, 57, 59, 55, -165, 81, 54, 57,
	28, -157, -157, -158, 57, -158, 28, -141, 29, 68,
	-147, 210, 60, -144, -144, -145, 30, -145, -145, -145,
	-153, 59, -153, 60, 60, 52, -116, -128, -176, -175,
	-117, -127, -180, 155, 129, 135, 136, 131, 57, 122,
	28, 128, 130, 149, 127, -180, 155, -111, -112, 124,
	22, 122, 28, 149, -128, -105, 59, -37, 39, 111,
	-51, -38, 11, 98, -117, -35, -33, 72, -61, -61,
	-187, -36, -132, 107, 181, 143, 179, 175, 195, 186,
	208, 177, 209, -129, -132, -61, -61, -117, -61, -61,
	252, -82, 80, -37, 78, -92, 52, -93, -70, -72,
	-71, -186, -2, -88, -116, -91, -82, -97, -37, -37,
	-37, 54, -37, -186, -186, -186, -187, 55, -82, -55,
	228, 232, 233, -164, -165, -168, -167, -116, -171, -158,
	-158, 54, -143, 52, 59, 60, 61, 68, 235, 67,
	56, -145, -145, 57, 107, 56, 55, 56, 55, 56,
	55, -51, 55, 81, -127, -116, -127, -116, -51, -127,
	-116, -107, -55, -39, -187, -61, -187, -140, -140, -140,
	-149, -140, 169, -140, 169, -187, -187, -187, 55, 19,
	-187, 55, 19, -186, -32, 250, -37, 27, -92, 55,
	-187, -187, -187, 55, 111, -187, -86, -89, -116, -89,
	-89, -89, -125, -116, -86, 56, 55, -140, -89, -151,
	206, 9, 54, -144, 59, -144, 60, 60, -128, -175,
	-165, 54, 26, -80, 13, -144, 57, -61, -61, -61,
	-61, -61, -187, 59, 28, -72, 34, -2, -186, -116,
	-116, 55, 56, -187, -187, -187, -54, -170, -169, 53,
	132, 66, -167, 56, -152, 128, 28, 127, 235, 56,
	-145, -145, 56, 56, -89, -186, -81, 14, 16, -187,
	-187, -187, -187, -31, 91, 255, 9, -70, -2, 111,
	-116, -169, 57, -159, 81, 59, 138, -142, 66, 28,
	28, 54, 56, -172, -173, 149, -37, -69, -187, 253,
	49, 256, -93, -187, -116, 60, -51, 59, 56, -179,
	-187, 55, -116, 39, 254, 257, 54, -177, -173, 34,
	39, -89, 151, 255, 56, 152, 256, -182, -183, 52,
	-186, 257, -183, 52, 10, 9, -61, 148, -181, 139,
	134, 137, 30, -181, -187, -187, 133, 29, 68,
}
var yyDef = [...]int{

	22, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 536, 0, 304, 304, 304, 304, 304, 304, 0,
	606, 589, 0, 0, 0, 0, -2, 292, 293, 0,
	295, 296, 820, 820, 820, 820, 820, 0, 0, 0,
	34, 35, 818, 1, 3, 544, 0, 0, 308, 311,
	306, 0, 589, 0, 0, 0, 61, 62, 0, 0,
	0, 806, 0, 807, 587, 587, 587, 607, 608, 611,
	612, 712, 713, 714, 715, 716, 717, 718, 719, 720,
	721, 722, 723, 724, 725, 726, 727, 728, 729, 730,
	731, 732, 733, 734, 735, 736, 737, 738, 739, 740,
	741, 742, 743, 744, 745, 746, 747, 748, 749, 750,
	751, 752, 753, 754, 755, 756, 757, 758, 759, 760,
	761, 762, 763, 764, 765, 766, 767, 768, 769, 770,
	771, 772, 773, 774, 775, 776, 777, 778, 779, 780,
	781, 782, 783, 784, 785, 786, 787, 788, 789, 790,
	791, 792, 793, 794, 795, 796, 797, 798, 799, 800,
	801, 802, 803, 804, 805, 808, 809, 810, 811, 812,
	813, 814, 815, 816, 817, 0, 0, 590, 0, 585,
	0, 585, 585, 585, 0, 249, 375, 615, 616, 806,
	807, 0, 0, 0, 0, 821, 821, 821, 821, 0,
	821, 0, 268, 269, 272, 273, 274, 275, 276, 821,
	289, 290, 281, 291, 294, 297, 298, 299, 300, 301,
	820, 820, 28, 548, 0, 0, 536, 30, 0, 304,
	309, 310, 314, 312, 313, 305, 0, 322, 326, 0,
	383, 0, 388, 390, -2, -2, 0, 425, 426, 427,
	428, 429, 0, 0, 0, 0, 0, 0, 0, 0,
	453, 454, 455, 456, 521, 522, 523, 524, 525, 526,
	527, 528, 392, 393, 518, 568, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 509, 0, 483, 483, 483,
	483, 483, 483, 483, 483, 0, 0, 0, 0, 0,
	0, 333, 335, 336, 337, 356, 0, 358, 0, 0,
	42, 46, 0, 797, 572, -2, -2, 0, 0, 613,
	614, -2, 721, -2, 619, 620, 621, 622, 623, 624,
	625, 626, 627, 628, 629, 630, 631, 632, 633, 634,
	635, 636, 637, 638, 639, 640, 641, 642, 643, 644,
	645, 646, 647, 648, 649, 650, 651, 652, 653, 654,
	655, 656, 657, 658, 659, 660, 661, 662, 663, 664,
	665, 666, 667, 668, 669, 670, 671, 672, 673, 674,
	675, 676, 677, 678, 679, 680, 681, 682, 683, 684,
	685, 686, 687, 688, 689, 690, 691, 692, 693, 694,
	695, 696, 697, 698, 699, 700, 701, 702, 703, 704,
	705, 706, 707, 708, 709, 710, 711, 0, 0, 81,
	0, 79, 0, 821, 0, 69, 0, 0, 0, 0,
	0, 821, 0, 0, 0, 0, 0, 0, 0, 248,
	0, 250, 821, 821, 821, 821, 821, 821, 821, 821,
	259, 822, 823, 260, 261, 262, 821, 821, 264, 0,
	282, 278, 279, 0, 0, 277, 302, 303, 29, 819,
	23, 0, 0, 545, 0, 537, 538, 541, 544, 28,
	311, 0, 316, 315, 307, 0, 323, 0, 0, 0,
	327, 0, 329, 330, 0, 386, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 410, 411, 412, 413, 414,
	415, 416, 389, 0, 403, 0, 0, 0, 445, 446,
	447, 448, 449, 450, 451, 0, 318, 28, 0, 423,
	0, 0, 0, 0, 0, 0, 0, 0, 314, 0,
	510, 0, 475, 0, 476, 477, 478, 479, 480, 481,
	482, 0, 318, 0, 0, 44, 0, 374, 0, 0,
	0, 0, 0, 0, 363, 0, 0, 366, 0, 0,
	0, 0, 357, 0, 0, 377, 768, 359, 0, 361,
	362, -2, 0, 0, 0, 40, 41, 0, 47, 797,
	49, 50, 0, 0, 0, 164, 580, 581, 582, 578,
	208, 0, 0, 145, 141, 87, 88, 89, 134, 91,
	134, 134, 134, 134, 161, 161, 161, 161, 117, 118,
	119, 120, 121, 0, 0, 104, 134, 134, 134, 108,
	124, 125, 126, 127, 128, 129, 130, 131, 92, 93,
	94, 95, 96, 97, 98, 136, 136, 136, 138, 138,
	609, 64, 0, 72, 0, 821, 0, 821, 77, 0,
	224, 0, 243, 586, 0, 821, 246, 247, 376, 617,
	618, 251, 252, 253, 254, 255, 256, 257, 258, 263,
	267, 0, 285, 0, 0, 271, 270, 549, 0, 0,
	0, 0, 0, 540, 542, 543, 548, 31, 314, 0,
	529, 0, 0, 0, 317, 26, 384, 385, 387, 404,
	0, 406, 408, 328, 324, 0, 519, -2, 394, 395,
	419, 420, 421, 0, 0, 0, 0, 417, 399, 0,
	430, 431, 432, 433, 434, 435, 436, 437, 438, 439,
	440, 441, 444, 494, 495, 0, 442, 443, 452, 0,
	0, 319, 320, 422, 0, 567, 28, 0, 0, 0,
	0, 0, 518, 0, 0, 0, 0, 516, 513, 0,
	0, 484, 0, 0, 0, 0, 0, 0, 373, 381,
	569, 0, 334, 352, 354, 0, 349, 364, 365, 367,
	0, 369, 0, 371, 372, 338, 339, 340, 0, 0,
	0, 0, 360, 381, 0, 381, 43, 573, 48, 0,
	0, 53, 54, 574, 575, 576, 0, 78, 209, 211,
	214, 215, 216, 82, 83, 84, 0, 0, 196, 0,
	0, 190, 190, 0, 188, 189, 80, 148, 146, 0,
	143, 142, 90, 0, 161, 161, 111, 112, 164, 0,
	164, 164, 164, 0, 0, 105, 106, 107, 99, 0,
	100, 101, 102, 0, 103, 0, 0, 821, 66, 0,
	70, 71, 67, 588, 68, 820, 0, 0, 601, 225,
	591, 592, 593, 594, 595, 596, 597, 598, 599, 600,
	0, 242, 821, 245, 282, 266, 0, 0, 283, 284,
	0, 546, 547, 0, 539, 24, 0, 583, 584, 530,
	531, 331, 405, 407, 409, 0, 318, 396, 417, 400,
	0, 397, 0, 0, 391, 457, 0, 0, 424, -2,
	460, 461, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 536, 0, 514, 0, 0, 474, 485, 486, 487,
	488, 561, 0, 0, -2, 0, 0, 536, 0, 0,
	0, 346, 353, 0, 0, 347, 0, 348, 368, 370,
	0, 0, 0, 0, 344, 536, 381, 39, 51, 52,
	0, 0, 58, 165, 166, 0, 212, 0, 0, 0,
	183, 190, 190, 186, 191, 187, 0, 156, 0, 147,
	86, 144, 0, 164, 164, 113, 0, 114, 115, 116,
	0, 132, 0, 0, 0, 0, 610, 65, 73, 74,
	0, 217, 820, 0, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 820, 0, 0, 820, 602,
	603, 604, 605, 0, 244, 285, 286, 287, 550, 0,
	25, 381, 0, 325, 520, 0, 398, 0, 418, 401,
	458, 321, 0, 134, 134, 499, 134, 138, 502, 134,
	504, 134, 507, 0, 0, 0, 0, 519, 0, 0,
	0, 511, 473, 517, 0, 32, 0, 561, 551, 563,
	565, 0, 28, 0, 557, 0, 544, 570, 382, 571,
	350, 0, 355, 0, 0, 0, 358, 0, 544, 38,
	55, 56, 57, 210, 213, 0, 192, 134, 195, 184,
	185, 0, 159, 0, 149, 150, 151, 152, 153, 155,
	135, 109, 110, 162, 163, 161, 0, 161, 0, 139,
	0, 821, 0, 0, 218, 0, 219, 221, 222, 223,
	0, 265, 532, 332, 459, 402, 462, 496, 161, 500,
	501, 503, 505, 506, 508, 464, 463, 465, 0, 0,
	468, 0, 0, 0, 0, 0, 515, 0, 33, 0,
	566, -2, 0, 0, 0, 45, 36, 0, 342, 0,
	0, 0, 377, 345, 37, 175, 0, 194, 0, 167,
	160, 0, 0, 164, 133, 164, 0, 0, 63, 75,
	76, 0, 0, 534, 0, 497, 498, 0, 0, 0,
	0, 489, 472, 512, 0, 564, 0, -2, 0, 559,
	558, 0, 351, 378, 379, 380, 341, 174, 176, 0,
	181, 0, 193, 0, 172, 0, 169, 171, 157, 154,
	122, 123, 137, 140, 0, 0, 27, 0, 0, 466,
	467, 469, 470, 0, 0, 0, 0, 554, 28, 0,
	343, 177, 178, 0, 182, 180, 0, 85, 0, 168,
	170, 0, 69, 0, 238, 0, 535, 533, 471, 0,
	0, 0, 562, -2, 560, 179, 0, 173, 158, 72,
	237, 0, 0, 490, 0, 493, 0, 220, 239, 0,
	491, 0, 0, 0, 197, 0, 0, 198, 199, 0,
	0, 492, 200, 0, 0, 0, 0, 0, 201, 203,
	204, 0, 0, 202, 240, 241, 205, 206, 207,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 74, 3, 3, 3, 101, 93, 3,
	54, 56, 98, 96, 55, 97, 111, 99, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 259,
	82, 81, 83, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 103, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 92, 3, 104,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 75,
	76, 77, 78, 79, 80, 84, 85, 86, 87, 88,
	89, 90, 91, 94, 95, 100, 102, 105, 106, 107,
	108, 109, 110, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:313
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:318
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:319
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:323
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:344
		{
			setParseTree(yylex, nil)
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:350
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:358
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 25:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:362
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 26:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:368
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 27:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:375
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:381
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:385
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:391
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:395
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 32:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:402
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 33:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:414
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:426
		{
			yyVAL.str = InsertStr
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:430
		{
			yyVAL.str = ReplaceStr
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:436
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:442
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 38:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:446
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:450
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:455
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:456
		{
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:460
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:464
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 44:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:469
		{
			yyVAL.partitions = nil
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:473
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:479
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:483
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:487
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:491
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:497
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:501
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:507
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:511
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:515
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:521
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:525
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:529
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:533
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:539
		{
			yyVAL.str = SessionStr
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:543
		{
			yyVAL.str = GlobalStr
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:549
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:554
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 63:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:560
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:565
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 65:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:569
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:573
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:581
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:585
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:590
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:594
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:600
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:605
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:610
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:616
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:621
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:627
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 77:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:633
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 78:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:640
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:647
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:651
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:657
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:662
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:666
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:670
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 85:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:676
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:687
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:698
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:703
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:709
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:713
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:717
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:721
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:725
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:729
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:733
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:739
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:745
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:751
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:757
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:763
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:771
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:775
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:779
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:783
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:787
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:793
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 110:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:797
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:801
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:805
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:809
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:813
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:817
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:821
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:825
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:829
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:833
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:837
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:841
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 122:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:845
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 123:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:850
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:856
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:860
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:864
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:868
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:872
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:876
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:880
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:884
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:890
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:895
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:900
		{
			yyVAL.optVal = nil
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:904
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:909
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 137:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:913
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 138:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:921
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:925
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 140:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:931
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:939
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:943
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:948
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:952
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:958
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:962
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:966
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:971
		{
			yyVAL.optVal = nil
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:975
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:979
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:983
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:987
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:991
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:995
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:999
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1004
		{
			yyVAL.optVal = nil
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1008
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1012
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1017
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1021
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1026
		{
			yyVAL.str = ""
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1030
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1034
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1039
		{
			yyVAL.str = ""
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1043
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1047
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1052
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1056
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1060
		{
			yyVAL.colKeyOpt = colKey
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1064
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1068
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 172:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1073
		{
			yyVAL.optVal = nil
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1077
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 174:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1083
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 175:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1087
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1093
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1097
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1103
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1107
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1112
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1118
		{
			yyVAL.str = ""
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1122
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1128
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1132
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1136
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1140
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1144
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1150
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1154
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 190:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1159
		{
			yyVAL.str = ""
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1163
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1169
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1173
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1179
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1185
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1189
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 197:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:1196
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 198:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1200
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 199:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1204
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 200:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line sql.y:1208
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1214
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1220
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1226
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1230
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1234
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1238
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1242
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 208:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1247
		{
			yyVAL.str = ""
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1251
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1255
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1263
		{
			yyVAL.str = yyDollar[1].str
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1267
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1271
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1277
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1281
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1285
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 217:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1291
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 218:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1295
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 219:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1299
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 220:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line sql.y:1303
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 221:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1316
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 222:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1326
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 223:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1331
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 224:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1336
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 225:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1340
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 237:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1359
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1365
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1369
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 240:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1375
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 241:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1379
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 242:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1385
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 243:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1391
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 244:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1399
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 245:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1404
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 246:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1412
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1416
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1422
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1426
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1431
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 251:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1437
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1441
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1445
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1450
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1454
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1458
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1462
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1466
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1470
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1474
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1478
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1482
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1486
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1490
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1494
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 266:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1499
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1509
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1513
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1517
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1521
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1527
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1531
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1535
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1539
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1543
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1547
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1557
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1563
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1567
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 280:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1573
		{
			yyVAL.str = ""
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1577
		{
			yyVAL.str = "full "
		}
	case 282:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1583
		{
			yyVAL.str = ""
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1587
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1591
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 285:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1597
		{
			yyVAL.showFilter = nil
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1601
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1605
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 288:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1611
		{
			yyVAL.str = ""
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1615
		{
			yyVAL.str = SessionStr
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1619
		{
			yyVAL.str = GlobalStr
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1625
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1629
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1635
		{
			yyVAL.statement = &Begin{}
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1639
		{
			yyVAL.statement = &Begin{}
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1645
		{
			yyVAL.statement = &Commit{}
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1651
		{
			yyVAL.statement = &Rollback{}
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1657
		{
			yyVAL.statement = &OtherRead{}
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1661
		{
			yyVAL.statement = &OtherRead{}
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1665
		{
			yyVAL.statement = &OtherRead{}
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1669
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1673
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1677
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1681
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 304:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1686
		{
			setAllowComments(yylex, true)
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1690
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 306:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1696
		{
			yyVAL.bytes2 = nil
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1700
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1706
		{
			yyVAL.str = UnionStr
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1710
		{
			yyVAL.str = UnionAllStr
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1714
		{
			yyVAL.str = UnionDistinctStr
		}
	case 311:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1719
		{
			yyVAL.str = ""
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1723
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1727
		{
			yyVAL.str = SQLCacheStr
		}
	case 314:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1732
		{
			yyVAL.str = ""
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1736
		{
			yyVAL.str = DistinctStr
		}
	case 316:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1741
		{
			yyVAL.str = ""
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1745
		{
			yyVAL.str = StraightJoinHint
		}
	case 318:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1750
		{
			yyVAL.selectExprs = nil
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1754
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1760
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1764
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1770
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1774
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1778
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 325:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1782
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 326:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1787
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1791
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1795
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1802
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1807
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1811
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1817
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1821
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1831
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1835
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1839
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1845
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 341:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1849
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1855
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1859
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1865
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1869
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 346:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1882
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 347:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1886
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 348:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1890
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1894
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1900
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 351:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1902
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 352:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1906
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1908
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 354:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1912
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1914
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 356:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1917
		{
			yyVAL.empty = struct{}{}
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1919
		{
			yyVAL.empty = struct{}{}
		}
	case 358:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1922
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1926
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1930
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1937
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1943
		{
			yyVAL.str = JoinStr
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1947
		{
			yyVAL.str = JoinStr
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1951
		{
			yyVAL.str = JoinStr
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1957
		{
			yyVAL.str = StraightJoinStr
		}
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1963
		{
			yyVAL.str = LeftJoinStr
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1967
		{
			yyVAL.str = LeftJoinStr
		}
	case 369:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1971
		{
			yyVAL.str = RightJoinStr
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1975
		{
			yyVAL.str = RightJoinStr
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1981
		{
			yyVAL.str = NaturalJoinStr
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1985
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1995
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1999
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2005
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2009
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 377:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2014
		{
			yyVAL.indexHints = nil
		}
	case 378:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2018
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 379:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2022
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 380:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2026
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 381:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2031
		{
			yyVAL.expr = nil
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2035
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2041
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2045
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2049
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2053
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 387:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2057
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2061
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2065
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 390:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2071
		{
			yyVAL.str = ""
		}
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2075
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2081
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2085
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2091
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2095
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 396:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2099
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 397:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2103
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 398:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2107
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2111
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 400:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2115
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 401:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2119
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 402:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2123
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2127
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2133
		{
			yyVAL.str = IsNullStr
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2137
		{
			yyVAL.str = IsNotNullStr
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2141
		{
			yyVAL.str = IsTrueStr
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2145
		{
			yyVAL.str = IsNotTrueStr
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2149
		{
			yyVAL.str = IsFalseStr
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2153
		{
			yyVAL.str = IsNotFalseStr
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2159
		{
			yyVAL.str = EqualStr
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2163
		{
			yyVAL.str = LessThanStr
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2167
		{
			yyVAL.str = GreaterThanStr
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2171
		{
			yyVAL.str = LessEqualStr
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2175
		{
			yyVAL.str = GreaterEqualStr
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2179
		{
			yyVAL.str = NotEqualStr
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2183
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 417:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2188
		{
			yyVAL.expr = nil
		}
	case 418:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2192
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2198
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2202
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2206
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2212
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2218
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2222
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2228
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2232
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2236
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2240
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2244
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2248
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2252
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2256
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2260
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2264
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2268
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2272
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2276
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2280
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2284
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2288
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2292
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2296
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2300
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2304
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2308
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2312
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 447:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2316
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2320
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 449:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2328
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 450:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2342
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 451:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2346
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2350
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 457:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2368
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 458:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2372
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 459:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2376
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 460:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2386
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 461:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2390
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 462:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2394
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 463:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2398
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 464:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2402
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 465:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2406
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 466:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2410
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 467:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2414
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 468:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2418
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 469:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2422
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 470:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2426
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 471:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2430
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 472:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2434
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 473:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2438
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 474:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2442
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2452
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2456
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2460
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2464
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2469
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2474
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2479
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2484
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 485:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2498
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 486:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2502
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 487:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2506
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 488:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2510
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 489:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2516
		{
			yyVAL.str = ""
		}
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2520
		{
			yyVAL.str = BooleanModeStr
		}
	case 491:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2524
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 492:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2528
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2532
		{
			yyVAL.str = QueryExpansionStr
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2538
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2542
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2548
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2552
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2556
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2560
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2564
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2568
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2574
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2578
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2582
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2586
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2590
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2594
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2598
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 509:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2603
		{
			yyVAL.expr = nil
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2607
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 511:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2612
		{
			yyVAL.str = string("")
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2616
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2622
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2626
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 515:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2632
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 516:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2637
		{
			yyVAL.expr = nil
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2641
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2647
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2651
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 520:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2655
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2661
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2665
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2669
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2673
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2677
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2681
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2685
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2689
		{
			yyVAL.expr = &NullVal{}
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2695
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2704
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2708
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 532:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2713
		{
			yyVAL.exprs = nil
		}
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2717
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 534:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2722
		{
			yyVAL.expr = nil
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2726
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 536:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2731
		{
			yyVAL.orderBy = nil
		}
	case 537:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2735
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2741
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 539:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2745
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2751
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 541:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2756
		{
			yyVAL.str = AscScr
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2760
		{
			yyVAL.str = AscScr
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2764
		{
			yyVAL.str = DescScr
		}
	case 544:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2769
		{
			yyVAL.limit = nil
		}
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2773
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 546:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2777
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 547:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2781
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 548:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2786
		{
			yyVAL.str = ""
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2790
		{
			yyVAL.str = ForUpdateStr
		}
	case 550:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2794
		{
			yyVAL.str = ShareModeStr
		}
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2807
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2811
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2815
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 554:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2820
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 555:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2824
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 556:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2828
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2835
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2839
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2843
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 560:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2847
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 561:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2852
		{
			yyVAL.updateExprs = nil
		}
	case 562:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2856
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2862
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2866
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2872
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2876
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2882
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2888
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2898
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2902
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2908
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2914
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2918
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2924
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2928
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 576:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2932
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 578:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2939
		{
			yyVAL.bytes = []byte("charset")
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2946
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2950
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2954
		{
			yyVAL.expr = &Default{}
		}
	case 585:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2963
		{
			yyVAL.byt = 0
		}
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2965
		{
			yyVAL.byt = 1
		}
	case 587:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2968
		{
			yyVAL.empty = struct{}{}
		}
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2970
		{
			yyVAL.empty = struct{}{}
		}
	case 589:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2973
		{
			yyVAL.str = ""
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2975
		{
			yyVAL.str = IgnoreStr
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2979
		{
			yyVAL.empty = struct{}{}
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2981
		{
			yyVAL.empty = struct{}{}
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2983
		{
			yyVAL.empty = struct{}{}
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2985
		{
			yyVAL.empty = struct{}{}
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2987
		{
			yyVAL.empty = struct{}{}
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2989
		{
			yyVAL.empty = struct{}{}
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2991
		{
			yyVAL.empty = struct{}{}
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2993
		{
			yyVAL.empty = struct{}{}
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2995
		{
			yyVAL.empty = struct{}{}
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2997
		{
			yyVAL.empty = struct{}{}
		}
	case 601:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3000
		{
			yyVAL.empty = struct{}{}
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3002
		{
			yyVAL.empty = struct{}{}
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3004
		{
			yyVAL.empty = struct{}{}
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3008
		{
			yyVAL.empty = struct{}{}
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3010
		{
			yyVAL.empty = struct{}{}
		}
	case 606:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3013
		{
			yyVAL.empty = struct{}{}
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3015
		{
			yyVAL.empty = struct{}{}
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3017
		{
			yyVAL.empty = struct{}{}
		}
	case 609:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3020
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 610:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3022
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3026
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3030
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3037
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3043
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3047
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3054
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3279
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3288
		{
			decNesting(yylex)
		}
	case 820:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3293
		{
			forceEOF(yylex)
		}
	case 821:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3298
		{
			forceEOF(yylex)
		}
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3302
		{
			forceEOF(yylex)
		}
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3306
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
